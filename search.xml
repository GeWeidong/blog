<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js和node当中的Event Loop</title>
      <link href="/blog/2019/08/07/js%E5%92%8Cnode%E5%BD%93%E4%B8%AD%E7%9A%84Event-Loop/"/>
      <url>/blog/2019/08/07/js%E5%92%8Cnode%E5%BD%93%E4%B8%AD%E7%9A%84Event-Loop/</url>
      
        <content type="html"><![CDATA[<h3 id="1-js中的Event-Loop"><a href="#1-js中的Event-Loop" class="headerlink" title="1.js中的Event Loop"></a>1.js中的Event Loop</h3><p><img src="http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png" alt="image"></p><ul><li>1⃣️首先执行主线程的代码；</li><li>2⃣️读取“任务队列event queue”，依次执行callback；</li><li>3⃣️循环执行第2⃣️步</li></ul><p>主线程代码运行会产生堆（heap）和栈（stack），栈代码会调用外部API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。</p><a id="more"></a><h3 id="2-node当中的Event-Loop"><a href="#2-node当中的Event-Loop" class="headerlink" title="2.node当中的Event Loop"></a>2.node当中的Event Loop</h3><h5 id="node-JS的运行逻辑"><a href="#node-JS的运行逻辑" class="headerlink" title="node JS的运行逻辑"></a>node JS的运行逻辑</h5><p><img src="http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100803.png" alt="image"></p><p>js 程序被V8引擎解析，完了调用Node API，接着进入事件循环Event Loop，Event Loop的执行顺序如下：</p><p><strong>event loop的6个阶段（phase）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   ┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     I/O callbacks     │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;─────┤  connections, │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │        check          │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">   └───────────────────────┘</span><br></pre></td></tr></table></figure><ul><li><strong>timers</strong>：执行setTimeout() 和 setInterval()中==到期==的callback。</li><li><strong>I/O callbacks</strong>：上一轮循环中有少数的I/Ocallback会被延迟到这一轮的这一阶段执行</li><li><strong>idle, prepare</strong>：仅内部使用</li><li><strong>poll</strong>：最为重要的阶段，执行I/O callback，在适当的条件下会阻塞在这个阶段</li><li><strong>check</strong>：执行setImmediate的callback</li><li><strong>close callbacks</strong>：执行close事件的callback，例如socket.on(“close”,func)</li></ul><h5 id="与”任务队列”有关的几个函数："><a href="#与”任务队列”有关的几个函数：" class="headerlink" title="与”任务队列”有关的几个函数："></a>与”任务队列”有关的几个函数：</h5><ul><li>setTimeout、setInterval</li><li>process.nextTick</li><li>setImmediate</li></ul><p>process.nextTick方法可以在当前”执行栈”的尾部—-下一次Event Loop（主线程读取”任务队列”）之前—-触发回调函数。<br><strong>也就是说，它指定的任务总是发生在所有异步任务之前</strong>。</p><p>setImmediate方法则是在当前”任务队列”的尾部添加事件，也就是说，它指定的任务总是在下一次Event Loop时执行，这与setTimeout(fn, 0)很像。</p><p>（1）A、B、C均为同步代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A();</span><br><span class="line">B();</span><br><span class="line">C();</span><br></pre></td></tr></table></figure><p><img src="http://pic4.zhimg.com/80/ba47432176970aeb9e9df4c3cbb3a623_hd.jpg" alt="image"></p><p>（2）B为process.nextTick</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A();</span><br><span class="line">process.nextTick(B);</span><br><span class="line">C();</span><br></pre></td></tr></table></figure><p><img src="http://pic1.zhimg.com/80/3a591f00cfe6b3c3b51137c2a8bda382_hd.jpg" alt="image"></p><p>（3）B为setImmidiate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A();</span><br><span class="line">setImmediate(B);</span><br><span class="line">C();</span><br></pre></td></tr></table></figure><p><img src="http://pic1.zhimg.com/80/2d5e6e9335f8972b0d5a6e010871d828_hd.jpg" alt="image"></p><h3 id="3-异步、同步、阻塞、非阻塞"><a href="#3-异步、同步、阻塞、非阻塞" class="headerlink" title="3.异步、同步、阻塞、非阻塞"></a>3.异步、同步、阻塞、非阻塞</h3><table><thead><tr><th>水壶</th><th>老王</th></tr></thead><tbody><tr><td>带响水壶（异步）</td><td>坐等水开（阻塞）</td></tr><tr><td>不响水壶（同步）</td><td>看电视等（非阻塞）</td></tr></tbody></table><p>==故事骨架：老王烧水==</p><p><strong>同步-阻塞</strong>：老王等着不带响的水壶水开；</p><p><strong>同步-非阻塞</strong>：老王去客厅看电视等着水开，但是时不时跑去厨房看看水开没开；</p><p><strong>异步-阻塞</strong>：水壶烧开后就会响，但是老王还是一直等着水开才走；</p><p><strong>异步-非阻塞</strong>：水壶烧水，老王去看电视等着，水开后有声音响，老王去拿烧开的水；</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSR折磨我的日子</title>
      <link href="/blog/2019/08/02/SSR%E6%8A%98%E7%A3%A8%E6%88%91%E7%9A%84%E6%97%A5%E5%AD%90/"/>
      <url>/blog/2019/08/02/SSR%E6%8A%98%E7%A3%A8%E6%88%91%E7%9A%84%E6%97%A5%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="一、服务端渲染思想"><a href="#一、服务端渲染思想" class="headerlink" title="一、服务端渲染思想"></a>一、服务端渲染思想</h2><h3 id="1-服务端渲染解决的问题"><a href="#1-服务端渲染解决的问题" class="headerlink" title="1.服务端渲染解决的问题"></a>1.服务端渲染解决的问题</h3><h4 id="1-为什么服务端渲染首屏渲染快？"><a href="#1-为什么服务端渲染首屏渲染快？" class="headerlink" title="(1)为什么服务端渲染首屏渲染快？"></a>(1)为什么服务端渲染首屏渲染快？</h4><a id="more"></a><p>如果不用SSR，前端可以使用的方式是：<br><strong>webpack的按需加载（代码分割code-spliting）</strong>。<br>无论是CSR还是SSR，都会经历三个过程：</p><pre><code>a.下载js/css文件b.请求数据c.渲染数据</code></pre><p>CSR：a–&gt;b–&gt;c（a、b、c都是在客户端）</p><p>SSR：b–&gt;c–&gt;a （b、c在服务端，a在客户端）</p><p><strong>为啥SSR会比较快？（关键字）</strong></p><ul><li>首屏</li></ul><blockquote><p>服务端只做首屏渲染，大大减轻服务端负担；</p></blockquote><blockquote><p>内网请求，响应快；</p></blockquote><ul><li>可视<blockquote><p>服务端渲染的页面，“只是用来看的”，因为js还没下载好，所以没有交互；</p></blockquote></li></ul><h4 id="2-为什么服务端渲染有利于SEO？"><a href="#2-为什么服务端渲染有利于SEO？" class="headerlink" title="(2)为什么服务端渲染有利于SEO？"></a>(2)为什么服务端渲染有利于SEO？</h4><ul><li>以React为例，客户端渲染全部依赖于虚拟DOM，而国内搜索引擎（百度）都爬不到虚拟DOM。</li></ul><h3 id="2-服务端渲染架构（saber架构）"><a href="#2-服务端渲染架构（saber架构）" class="headerlink" title="2.服务端渲染架构（saber架构）"></a>2.服务端渲染架构（saber架构）</h3><h4 id="（1）saber架构分析"><a href="#（1）saber架构分析" class="headerlink" title="（1）saber架构分析"></a>（1）saber架构分析</h4><p>saber项目分为react-saber、react-saber-server两块处理逻辑。</p><h5 id="第一部分：-react-saber"><a href="#第一部分：-react-saber" class="headerlink" title="第一部分： react-saber"></a>第一部分： react-saber</h5><p>功能：react项目的cli工具，需要全局安装，包括以下功能：</p><blockquote><p>初始化业务线项目</p></blockquote><blockquote><p>增加子项目</p></blockquote><blockquote><p>启动测试环境</p></blockquote><blockquote><p>打包第三方库</p></blockquote><blockquote><p>打包业务代码</p></blockquote><blockquote><p>打包服务端第三方库</p></blockquote><blockquote><p>打包服务端启动文件</p></blockquote><p>配置：新项目的配置项如下：</p><blockquote><p>业务线项目名称(project)</p></blockquote><blockquote><p>业务线项目域名(domain)</p></blockquote><blockquote><p>静态资源cdn域名(cdn)</p></blockquote><blockquote><p>子项目名称(subproject)</p></blockquote><blockquote><p>选择使用的模版类型</p></blockquote><pre><code>-simple （react）-standard（react+redux）</code></pre><blockquote><p>是否进行首屏服务端渲染</p></blockquote><blockquote><p>为子项目路径增加前缀</p></blockquote><blockquote><p>增加基于业务线项目的公共库（.gitmodule形式）</p></blockquote><blockquote><p>询问是否安装依赖</p></blockquote><p><strong>设计分析</strong>：</p><p>1.命令行工具集合使用的yargs</p><p>2.saber init</p><blockquote><p>command(‘init’, ‘init project’, init)</p></blockquote><p>会执行/command/init方法，其中做了：<br>1）创建项目和子项目脚手架；<br>2）生成配置文件config.json和服务端启动文件srserver.js；<br>3）子项目中生成配置项.saberrc；<br>4）安装依赖npm install；<br>补充：以上大部分操作均为文件读写操作，其中下载配置项的动作npm install使用了child_process.execSync执行，用于创建node子进程来同步执行该操作。</p><p>3.saber create</p><p>这个命令就是增加子项目，复制模版到子项目脚手架中，仅此而已，支持两种方式saber create <name>和saber create；</name></p><p>4.saber dev</p><p>实际就是webpack dev模式，只不过可以开启全部/单个项目的dev，推荐后者。</p><p>标准的webpack配置，使用webpack-dev-middleware和webpack-hot-middleware实现热加载功能，默认监听的是80端口，这样有利于和RD联调。</p><p>如果使用命令行saber dev -e <name>那么会只针对某个子项目进行dev，webpack配置中entry中只包含一个入口</name></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="string">'home/index'</span>: </span><br><span class="line">      [ <span class="string">'eventsource-polyfill'</span>,</span><br><span class="line">        <span class="string">'webpack-hot-middleware/client'</span>,</span><br><span class="line">        <span class="string">'./home/index.js'</span> ],</span><br><span class="line">     <span class="string">'monitor/index'</span>: </span><br><span class="line">      [ <span class="string">'eventsource-polyfill'</span>,</span><br><span class="line">        <span class="string">'webpack-hot-middleware/client'</span>,</span><br><span class="line">        <span class="string">'./monitor/index.js'</span> ],</span><br><span class="line">     <span class="string">'secret/index'</span>: </span><br><span class="line">      [ <span class="string">'eventsource-polyfill'</span>,</span><br><span class="line">        <span class="string">'webpack-hot-middleware/client'</span>,</span><br><span class="line">        <span class="string">'./secret/index.js'</span> ],</span><br><span class="line">     <span class="string">'shop/index'</span>: </span><br><span class="line">      [ <span class="string">'eventsource-polyfill'</span>,</span><br><span class="line">        <span class="string">'webpack-hot-middleware/client'</span>,</span><br><span class="line">        <span class="string">'./shop/index.js'</span> ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用saber dev -e monitor 后:</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'monitor/index'</span>: </span><br><span class="line">      [ <span class="string">'eventsource-polyfill'</span>,</span><br><span class="line">        <span class="string">'webpack-hot-middleware/client'</span>,</span><br><span class="line">        <span class="string">'./monitor/index.js'</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack配置中使用的loader：</p><ul><li>eslint-friendly-formatter （eslint）</li><li>babel （编译es6，jsx语法等）</li><li>json-loader</li><li>url-loader</li><li>style-loader （支持sass，less，stylus，自动匹配）</li></ul><p>webpack配置中使用的plugin：</p><ul><li>webpack.DefinePlugin （定义全局变量）</li><li>HashedModuleIdsPlugin （该插件会根据模块的相对路径生成一个四位数的hash作为模块id）</li><li>extract-text-webpack-plugin （将css从jsx中抽离出来，提高页面渲染速度）</li><li>html-webpack-plugin （生成html文件）</li></ul><blockquote><p>默认功能不能实现自定义的html文件内容，所以使用了html-webpack-plugin-after-emit事件来扩展其功能。这就是/plugins/PreDevHtmlPlugin.js和/plugins/PreHtmlPlugin.js的作用，根据saber buildDll生成的产物，来拼装index.html文件。</p></blockquote><blockquote><p>PreDevHtmlPlugin.js和PreHtmlPlugin.js的区别就是，前者会同时插入standard.js和simple.js；而后者只会根据相应的type选择插入哪个js；</p></blockquote><ul><li>HotModuleReplacementPlugin （热替换）</li><li>DllReferencePlugin</li></ul><blockquote><p>saber dev之前必须执行saber buildDll来抽离打包第三方库，此插件是和DllPlugin配合使用的。第三方库打包时，需要区分vendors和是否是服务端渲染。</p></blockquote><blockquote><p>执行完saber buildDll后，会生成以下四个文件：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/dist</span><br><span class="line">    // 包含所有的第三方库</span><br><span class="line">    vendors_simple_d59ff4455d44fb081f42.js</span><br><span class="line">    vendors_standard_a8ac385f224dac3af1a6.js</span><br><span class="line"></span><br><span class="line">/mainfest</span><br><span class="line">    // 文件会包含所有库代码的一个索引</span><br><span class="line">    vendors_simple_manifest.json</span><br><span class="line">    vendors_standard_manifest.json</span><br></pre></td></tr></table></figure><blockquote><p>如果执行saber buildServerDll，会生成两组文件：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/dist</span><br><span class="line">    // 包含所有的第三方库</span><br><span class="line">    vendors_simple_d59ff4455d44fb081f42.js</span><br><span class="line">    vendors_standard_a8ac385f224dac3af1a6.js</span><br><span class="line">    vendors_simple_42d03059df56b4c7eb9c_commonjs2.js</span><br><span class="line">    vendors_standard_2d7abf59cef3512a6ff3_commonjs2.js</span><br><span class="line"></span><br><span class="line">/mainfest</span><br><span class="line">    // 文件会包含所有库代码的一个索引</span><br><span class="line">    vendors_simple_manifest.json</span><br><span class="line">    vendors_standard_manifest.json</span><br><span class="line">    vendors_simple_manifest_commonjs2.json</span><br><span class="line">    vendors_standard_manifest_commonjs2.json</span><br></pre></td></tr></table></figure><p>然后使用DllReferencePlugin读取json文件内容，然后映射到第三方库中去，两者必须绑定使用。</p><ul><li>NoEmitOnErrorsPlugin （webpack 进程遇到错误代码将不会退出）</li><li>ModuleConcatenationPlugin （作用域提升）</li></ul><p>所用模块：</p><ul><li>ora     （实现node.js 命令行环境的 loading效果， 和显示各种状态的图标等）</li><li>glob    （获取匹配对应规则文件）</li><li>express （开启node服务）</li></ul><p>5.saber buildDll</p><p>1）编译babel、jsx语法；</p><p>2）定义全局变量；</p><p>3）使用DllPlugin进行第三方库抽离打包；</p><p>4）使用HashedModuleIdsPlugin插件，将文件路径作为Module id，这样就不会依赖于打包顺序发生变化而导致的重复打包；</p><p>5）UglifyJSWebpackPlugin压缩混淆；</p><p>6.saber buildServerDll</p><blockquote><p>基本和saber buildDll一样，唯一不通的是saber buildServerDll设置了webpack编译的target=’node’，规定了服务器渲染编译第三方包，的环境是，node。</p></blockquote><p>7.saber build</p><p>1）如果不指定入口的话，那么所有入口都打包；反之，只打包一个入口；</p><p>2）使用的loader和plugin基本和saber dev一样，只是去掉了热替换之类的本地开发用的插件；</p><p>8.saber buildServer</p><p>1）打包操作基本和saber build一样，不过是加了target=node配置；</p><p>2）打包之前进行了项目目录中/src/server/entry.js的读写操作：</p><ul><li>将子项目中的server.js模块提取出来；</li><li>将子项目中的routesConfig.js模块提取出来；</li><li>将子项目中的/store/index.js模块提取出来；</li><li>将子项目的配置项./.saberrc.js文件提取出来；</li><li>将下线的子项目组成数组ignoreDirEntery返回；</li></ul><h5 id="第二部分-react-saber-server（服务端渲染逻辑）"><a href="#第二部分-react-saber-server（服务端渲染逻辑）" class="headerlink" title="第二部分 react-saber-server（服务端渲染逻辑）"></a>第二部分 react-saber-server（服务端渲染逻辑）</h5><p>1.提取项目配置模块</p><blockquote><p>使用server.setConfig(key, val)来提取项目的所有配置，其中server是require(‘react-saber-server’).srserver的暴露给客户端代码的方法，用于收集以下配置信息：</p></blockquote><ul><li><p>projectConfig</p><blockquote><p>指向config.json文件；</p></blockquote></li><li><p>entryArr</p><blockquote><p>入口列表，比如 [ ‘home’, ‘monitor’, ‘secret’, ‘shop’ ]</p></blockquote></li><li><p>[dir] 表示入口字端</p></li></ul><blockquote><p>将会遍历所有的入口配置文件，针对某个入口，提取以下数据组成对象:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    handler: 表示每个子项目下的server.js的句柄，目前都为null,</span><br><span class="line">    proType: 是子项目的.saberrc文件,</span><br><span class="line">    htmlSource: 子项目的打包好的index.html文件,</span><br><span class="line">    entry: 子项目入口前缀,</span><br><span class="line">    // 以下是开启redux的配置</span><br><span class="line">    Provider: require(&apos;react-redux&apos;).Provider,</span><br><span class="line">    store: 子项目的/store/index.js对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.进入中间件系统</p><p>matchStaticFile –&gt; matchEntry –&gt; dealError –&gt; startListen</p><p><strong>1）matchStaticFile</strong>:</p><blockquote><p>使用express.static创建静态资源服务器(/dist下)</p></blockquote><p><strong>2）matchEntry:</strong></p><blockquote><p>匹配入口后，执行:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(&apos;/&apos; + project + &apos;/&apos; + entry + dir, function (req, res) &#123;</span><br><span class="line">    // 针对每个入口，执行同样的callback函数</span><br><span class="line">    cb(req, res, dir, config);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>上边的callback函数指的是：  <strong>afterMatchEntry</strong>此方法是SSR的核心方法</p></blockquote><p>拆分此函数，基本过程如下（只针对SSR过程）：</p><p>根据路由配置，匹配组件 –&gt; 针对组件fetchData操作 –&gt; joinHtml组成待发送给客户端的html文件 –&gt; sendHtml将组成的html文件发送给客户端</p><blockquote><p>saber自己组成了一个数据结构用来存放服务的执行顺序：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// this._services对象</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">name: &apos;matchRoute&apos;,</span><br><span class="line">fun: services.matchRoute,</span><br><span class="line">cbList: [</span><br><span class="line">&#123;</span><br><span class="line">            name: &apos;matchComponent&apos;,</span><br><span class="line">            fun: components.matchComponent</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        name: &apos;fetchData&apos;,</span><br><span class="line">        fun: components.fetchData</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        name: &apos;joinHtml&apos;,</span><br><span class="line">        fun: components.joinHtml</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        name: &apos;sendHtml&apos;,</span><br><span class="line">        fun: components.sendHtml</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>services.matchRoute方法执行完后，会遍历cbList数组，依次执行每个针对组件的服务（中间件），这部分的逻辑如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">execute: function() &#123; //当调用next时执行index所指向的中间件</span><br><span class="line">    let _this = this;</span><br><span class="line">    for(let i=0; i&lt;_this.service.length; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        let service = _this.service[i];</span><br><span class="line">        service.fun(_this.req, _this.res, _this.config, async (params)=&gt;&#123;</span><br><span class="line">            for(let cb of service.cbList) &#123;    </span><br><span class="line">                await cb.fun(_this.req, _this.res, _this.config)(params);            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>execute方法是初始方法，就是针对以上this._services对象依次执行回调，首先会执行services.matchRoute方法，使用react-router-config包拆分路由，拿到routers config又依次进行了如下方法：</p><blockquote><p>routers config 如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[ </span><br><span class="line">&#123; </span><br><span class="line">route: &#123; component: [Function: t], routes: [Array] &#125;,</span><br><span class="line">     match: &#123; path: &apos;/&apos;, url: &apos;/&apos;, params: &#123;&#125;, isExact: false &#125; </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">    route: &#123; path: &apos;/zoro/monitor/index&apos;, exact: true, component: [Object] &#125;,</span><br><span class="line">     match: </span><br><span class="line">      &#123; </span><br><span class="line">      path: &apos;/zoro/monitor/index&apos;,</span><br><span class="line">        url: &apos;/zoro/monitor/index&apos;,</span><br><span class="line">        isExact: true,</span><br><span class="line">        params: &#123;&#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>matchComponent:<blockquote><p>如果子项目支持redux的话，提取出全局store，挂载到config对象上：config.storeObj = config.store();</p></blockquote></li><li>fetchData:<blockquote><p>请求组件中的数据，用于和模版数据同步，分两种情况，一种是redux，一种是无redux。</p></blockquote></li></ul><p>redux：</p><p>带有redux的SSR过程，抽象整个过程就是，“脱水”和“注水”两个过程来实现前后端数据的统一，在发送html给前端前，node将前端的请求到的数据塞到页面中去，这个过程叫“<strong>脱水</strong>”；浏览器收到html和挂载在html中的数据后，请求js，然后接管页面，用拿到的数据来初始化组件，这个过程叫做“<strong>注水</strong>”。</p><p>前端容器组件中，会暴露fillData方法，其中参数(store, req)都是服务端的，客户端拿到服务端请求的数据后，会dispatch给服务端的store扩充，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static fillData(store,req) &#123;</span><br><span class="line">    const UID = getUid(req);</span><br><span class="line">    return store.dispatch(initialActions.initial_fetch_action(UID, req));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无redux：</p><p>有redux的时候可以通过前端store.dispatch来把数据挂载到全局store，node服务通过matchComponent方法中的config.storeObj = config.store();拿到的全局的store，任督二脉打通，前后端数据同步。没有redux的时候，不会通过store来“传递”数据，那么就需要将前端fillData方法请求来的数据保存到服务端，然后吐出html的时候再将数据挂载到模版中，注意，有redux的时候是不需要这样的，接下来分析joinHtml过程。</p><ul><li>joinHtml:</li></ul><p>redux：</p><p>基本骨架为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;StaticRouter location=&#123;req.originalUrl&#125; context=&#123;&#123;&#125;&#125;&gt;&#123;renderRoutes(route)&#125;&lt;/StaticRouter&gt;</span><br><span class="line">&lt;/Provider&gt;</span><br></pre></td></tr></table></figure><blockquote><p>服务端渲染中，显然使用BrowserRouter是不合适的，BrowserRouter 会通过HTML5 提供的 history API来保持页面与URL的同步，而StaticRouter 则不会改变URL，其中接受的location属性，StaticRouter会根据请求的url自动匹配reatc组件，所以才会实现刷新页面，服务端返回的对应路由的组与浏览器端保持一致。</p></blockquote><p>初始化的数据（需要挂载到模版上的数据）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initialState = JSON.stringify(store.getState());</span><br></pre></td></tr></table></figure><p>上述fillData过程，后端拿到了带有数据的store，组成了发送给前端的html，那么前端接管页面后，如何同步数据呢：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 子项目中index.js做的事</span><br><span class="line">const common = commonGlobal.getGlobal();</span><br><span class="line">const initialState = common.__INITIALSTATE__ || &#123;&#125;;</span><br><span class="line">const store = configureStore(initialState);</span><br><span class="line">const rootEle = document.getElementById(&apos;app&apos;);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;Routes /&gt;</span><br><span class="line">    &lt;/Provider&gt;, rootEle);</span><br></pre></td></tr></table></figure><p>前端接管后，会拿到一份有数据的<strong>INITIALSTATE</strong> 全局对象，然后初始化store，这样就实现了前后端数据同步的目的。</p><p>无redux：</p><p>基本骨架：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;StaticRouter location=&#123;req.originalUrl&#125; context=&#123;&#123;&#125;&#125;&gt;&#123;renderRoutes(route)&#125;&lt;/StaticRouter&gt;</span><br></pre></td></tr></table></figure><p>初始化的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initialState = JSON.stringify(config.simpleData);</span><br></pre></td></tr></table></figure><p>然后统一将webpack打包好的index.html中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- script --&gt;</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.global = &#123;&#125;;\nglobal.__INITIALSTATE__=&apos;+initialState+&apos;;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>等待被发送</p><ul><li>sendHtml:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">components.sendHtml = (req, res, config) =&gt; (branch) =&gt; &#123;</span><br><span class="line">    var htmlSplitArr = config.html.split(/(&lt;div id=\&quot;app\&quot;&gt;)/);</span><br><span class="line">    res.write(htmlSplitArr[0]+htmlSplitArr[1]);</span><br><span class="line">    const stream = renderToNodeStream(config.element);</span><br><span class="line">    stream.pipe(res, &#123; end: false &#125;);</span><br><span class="line">    // 当React渲染结束后，发送剩余的HTML部分给浏览器</span><br><span class="line">    stream.on(&apos;end&apos;, () =&gt; &#123;</span><br><span class="line">        res.end(htmlSplitArr[2]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先将html文件分为三份，</p><p>1.&lt;div id=&quot;app&quot;&gt;之前的；</p><p>2.&lt;div id=&quot;app&quot;&gt;；</p><p>3.&lt;div id=&quot;app&quot;&gt;之后的；</p><p>在1和2之间进行React.renderToNodeStream，{end: false}表示节点流渲染黑没有结束，等到结束后，即stream.on(‘end’)事件发出后，将剩余的文件3送出，完成SSR最后一段接力棒。</p><blockquote><p>备注：renderToNodeStream支持直接渲染到节点流。渲染到流可以减少你的内容的第一个字节（TTFB）的时间，在文档的下一部分生成之前，将文档的开头至结尾发送到浏览器。 当内容从服务器流式传输时，浏览器将开始解析HTML文档。速度是renderToString的三倍</p></blockquote><p>需要说明的是，此处除了matchStaticFile、matchEntry、dealError、startListen四个默认的express中间件外，可以扩展您的中间件系统，支持添加到任何位置。</p><p><strong>3）dealError：</strong></p><p>这个就是当express匹配不到路由的时候，展示的404页面。</p><p><strong>4）startListen：</strong></p><p>监听端口，开启服务。</p><p>3.如何增加自定义服务</p><p>修改文件：/src/server/srserver.js</p><p>如何添加：（支持三种方式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//在服务最后加入服务</span><br><span class="line">server.use(&apos;name&apos;, fun, params, cb)</span><br><span class="line">//在指定服务前加入服务</span><br><span class="line">server.beforeUse(&apos;beforeName&apos;, &apos;name&apos;, fun, params, cb)</span><br><span class="line">//在指定服务后加入服务</span><br><span class="line">server.afterUse(&apos;afterName&apos;, &apos;name&apos;, fun, params, cb)</span><br></pre></td></tr></table></figure><p>其中fun是执行的操作函数,cb是执行完后的回调。</p><p>4.如何针对某个子项目增加自定义服务</p><p>修改文件：/src/mysubproject/server/srserver.js</p><p>如何添加：</p><p>1）两种类型type=”service”和type=”component”；</p><p>2）一个component依赖一个service，一个service包含多个component(在添加component的时候需要让serviceName和service的serviceName对应起来)；</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    logserver : &#123;</span><br><span class="line">        type: &apos;service&apos;,</span><br><span class="line">        fun: function(req, res, config, cb)&#123;</span><br><span class="line">            console.log(&apos;&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        serviceName: &apos;matchRoute&apos;,</span><br><span class="line">        pos: &apos;before&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    logcomponent : &#123;</span><br><span class="line">        serviceName: &apos;matchRoute&apos;,</span><br><span class="line">        type: &apos;component&apos;,</span><br><span class="line">        fun: function(req, res, config, cb)&#123;</span><br><span class="line">            console.log(&apos;&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        componentName: &apos;matchComponent&apos;,</span><br><span class="line">        pos: &apos;before&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h4 id="（2）其他"><a href="#（2）其他" class="headerlink" title="（2）其他"></a>（2）其他</h4><ul><li>saber的路由配置</li></ul><p><a href="http://zoro.58corp.com/zoro/monitor/index" target="_blank" rel="noopener">http://zoro.58corp.com/zoro/monitor/index</a></p><p><strong>1.一级路由 /zoro</strong></p><blockquote><p>是由nginx转发</p></blockquote><p>本地的nginx配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">upstream activity_online &#123;</span><br><span class="line">    server 127.0.0.1:8008;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream zoro_online &#123;</span><br><span class="line">    server 127.0.0.1:8009;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name zcmws.58.com zcm.58cdn.com.cn zoro.58corp.com;</span><br><span class="line"></span><br><span class="line">    location &apos;/activity&apos; &#123;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_pass http://activity_online;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &apos;/zoro&apos; &#123;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_pass http://zoro_online;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当访问zoro.58corp.com/zoro时，会在服务器中分配8009端口，来运行当前的node服务。</p><p><strong>2.二级路由/monitor</strong></p><p>代表某个子项目的一级路径entry，从这一级往下，都是由express来进行分发的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(`/$&#123;project&#125;/$&#123;entry&#125;`+dir,(req,res)=&gt;&#123;</span><br><span class="line">// cb实际上就是上边四部曲：matchComponent、fetchData、joinHtml、sendHtml</span><br><span class="line">    cb(req, res, dir, config);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>3.三级路由/index</strong></p><p>是由react-router-config来进行匹配react组件的，服务端使用的StaticRouter。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSR React Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Babel-Polyfill的正确使用</title>
      <link href="/blog/2019/06/11/Babel-Polyfill%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2019/06/11/Babel-Polyfill%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000010106158" target="_blank" rel="noopener">参考：21 分钟精通前端 Polyfill 方案</a></p><p><a href="https://babel.docschina.org/docs/en/6.26.3/babel-polyfill" target="_blank" rel="noopener">官网：Polyfill</a></p><p><a href="https://segmentfault.com/a/1190000011155061" target="_blank" rel="noopener">思否：你真的会用babel嘛？</a></p><a id="more"></a><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>babel-cli对于编译没啥任何功效，必须搭配presets、plugins来使用。</p><ul><li>presets 字段设定转码规则</li><li>plugins 各种插件</li></ul><h4 id="局限："><a href="#局限：" class="headerlink" title="局限："></a>局限：</h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。</p><h4 id="使用polyfill解决："><a href="#使用polyfill解决：" class="headerlink" title="使用polyfill解决："></a>使用polyfill解决：</h4><h5 id="方案一：babel-plugin-transform-xxx"><a href="#方案一：babel-plugin-transform-xxx" class="headerlink" title="方案一：babel-plugin-transform-xxx"></a>方案一：babel-plugin-transform-xxx</h5><ul><li>使用</li></ul><blockquote><p>支持Object.assign语法：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># in .babelrc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;latest&quot;],</span><br><span class="line">  &quot;plugins&quot;: [&quot;transform-object-assign&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>特点</p></li><li><input checked disabled type="checkbox"> <p>1.自己一个个引入，麻烦；</p></li><li><input checked disabled type="checkbox"> <p>2.每个文件会生成大量重复的代码，导致打包体积大；</p></li></ul><h5 id="方案二：babel-runtime-amp-babel-plugin-transform-runtime"><a href="#方案二：babel-runtime-amp-babel-plugin-transform-runtime" class="headerlink" title="方案二：babel-runtime &amp; babel-plugin-transform-runtime"></a>方案二：babel-runtime &amp; babel-plugin-transform-runtime</h5><ul><li>使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># .babelrc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;latest&quot;],</span><br><span class="line">  &quot;plugins&quot;: [&quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>特点</li></ul><blockquote><p>打包后的部分产物：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    var bar = exports.bar = function bar(a, b) &#123;</span><br><span class="line">    var o = Object;</span><br><span class="line">    var c = [1, 2, 3].includes(3);</span><br><span class="line">    return c &amp;&amp; o.assign(a, b);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><input checked disabled type="checkbox"> 1.实例方法不会编译；</li><li><input checked disabled type="checkbox"> 2.引用的部分不能被编译；</li></ul><h5 id="方案三：全局babel-polyfill"><a href="#方案三：全局babel-polyfill" class="headerlink" title="方案三：全局babel-polyfill"></a>方案三：全局babel-polyfill</h5><ul><li>使用</li></ul><blockquote><p>全局引用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;babel-polyfill&apos;); or import &apos;babel-polyfill&apos;;</span><br></pre></td></tr></table></figure><ul><li><p>特点</p></li><li><input checked disabled type="checkbox"> <p>打包后太大；</p></li></ul><h5 id="方案四：babel-preset-env（根据浏览器最低兼容环境配置）"><a href="#方案四：babel-preset-env（根据浏览器最低兼容环境配置）" class="headerlink" title="方案四：babel-preset-env（根据浏览器最低兼容环境配置）"></a>方案四：babel-preset-env（根据浏览器最低兼容环境配置）</h5><ul><li>使用：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># .babelrc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;env&quot;, &#123;</span><br><span class="line">      &quot;targets&quot;: &#123;</span><br><span class="line">        &quot;browsers&quot;: [&quot;IE &gt;= 9&quot;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;useBuiltIns&quot;: true</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意：业务代码中必须引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;babel-polyfil&apos;); or import &apos;babel-polyfill&apos;;</span><br></pre></td></tr></table></figure><ul><li><p>特点：</p></li><li><input checked disabled type="checkbox"> <p>现在来说，比较完美的解决方案；</p></li></ul><h5 id="方案五：polyfill-io（根据使用的浏览器选择配置）"><a href="#方案五：polyfill-io（根据使用的浏览器选择配置）" class="headerlink" title="方案五：polyfill.io（根据使用的浏览器选择配置）"></a>方案五：polyfill.io（根据使用的浏览器选择配置）</h5><ul><li>使用</li></ul><p>1.cdn引入：<code>https://cdn.polyfill.io/v2/polyfill.js</code></p><p>2.<a href="https://github.com/Financial-Times/polyfill-service" target="_blank" rel="noopener">polyfill-service</a></p><ul><li><p>特点</p></li><li><input checked disabled type="checkbox"> <p>不稳定</p></li></ul><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li>打算封装成js工具、库，可以使用<code>babel-runtime</code>，自己的库自己提供<code>polyfill</code>;</li><li>具体的项目中使用<code>babel-runtime</code>和<code>babel-preset-env</code>比较合适；</li></ul><h4 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h4><ul><li>babel-core </li></ul><blockquote><p>babel的编译器，提供核心API，将js转换为AST（抽象语法树）</p></blockquote><ul><li><p>babel-node</p><blockquote><p>babel-cli工具自带一个babel-node命令，提供一个支持ES6的REPL环境，可以在命令行直接运行es6语法</p></blockquote></li><li><p>babel-register</p></li></ul><blockquote><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。</p></blockquote><p>babel-register是实时编译的，只适合在开发环境使用。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript Babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux从入门到跳楼</title>
      <link href="/blog/2019/03/02/redux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%B7%B3%E6%A5%BC/"/>
      <url>/blog/2019/03/02/redux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%B7%B3%E6%A5%BC/</url>
      
        <content type="html"><![CDATA[<h4 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1.应用场景"></a>1.应用场景</h4><p>React设计理念之一为单向数据流，这从一方面方便了数据的管理。但是React本身只是view，并没有提供完备的数据管理方案。随着应用的不断复杂化，如果用react构建前端应用的话，就要应对纷繁复杂的数据通信和管理，js需要维护更多的状态（state），这些state可能包括用户信息、缓存数据、全局设置状态、被激活的路由、被选中的标签、是否加载动效或者分页器等等。</p><p>这时，Flux架构应运而生，Redux是其最优雅的实现，Redux是一个不依赖任何库的框架，但是与react结合的最好，其中react-redux等开源组件便是把react与redux组合起来进行调用开发。</p><a id="more"></a><blockquote><p>备注：</p></blockquote><blockquote><p>1.如果你不知道是否需要 Redux，那就是不需要它</p></blockquote><blockquote><p>2.只有遇到 React 实在解决不了的问题，你才需要 Redux</p></blockquote><p><strong>Redux使用场景：</strong></p><ul><li>某个组件的状态，需要共享</li><li>某个状态需要在任何地方都可以拿到</li><li>一个组件需要改变全局状态</li><li>一个组件需要改变另一个组件的状态</li></ul><blockquote><p>比如，论坛应用中的夜间设置、回到顶部、userInfo全局共享等场景。redux最终目的就是让状态(state)变化变得可预测.</p></blockquote><h4 id="2-使用的三原则"><a href="#2-使用的三原则" class="headerlink" title="2.使用的三原则"></a>2.使用的三原则</h4><ul><li>单一数据源<blockquote><p> 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.</p></blockquote></li><li>状态是只读的<blockquote><p>唯一能改变state的方法，就是触发action操作。action是用来描述正在发生的事件的一个对象</p></blockquote></li><li>通过纯函数修改State<blockquote><p>纯函数的问题，也是来自于函数式编程思想，我们在中学时学的函数就是纯函数，对于同一个输入，必然有相同的输出。这就保证了数据的可控性，这里的纯函数就是reducer</p></blockquote></li></ul><h4 id="3-redux状态管理的流程"><a href="#3-redux状态管理的流程" class="headerlink" title="3.redux状态管理的流程"></a>3.redux状态管理的流程</h4><p><img src="http://upload-images.jianshu.io/upload_images/1400529-59aa52304c232986.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><strong>store</strong></li></ul><p>Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。(一个store是一个对象, reducer会改变store中的某些值)</p><p>Redux 提供createStore这个函数，用来生成 Store。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &apos;redux&apos;;</span><br><span class="line">const store = createStore(fn);</span><br></pre></td></tr></table></figure><p>上面代码中，createStore函数接受另一个函数作为参数，返回新生成的 Store 对象。这个fn就是reducer纯函数，通常我们在开发中也会使用中间件，来优化架构，比如最常用的异步操作插件，redux-thunk，如果配合redux-thunk来创建store的话，代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;;</span><br><span class="line">import rootReducer from &apos;../reducers/rootReudcer&apos;;</span><br><span class="line"></span><br><span class="line">let createStoreWithMiddleware = applyMiddleware(thunk)(createStore);</span><br><span class="line">let store = createStoreWithMiddleware(rootReducer);</span><br></pre></td></tr></table></figure><p>redux-thunk的源码及其简单，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 判断action是否是函数，如果是，继续执行递归式的操作。所以在redux中的异步，只能出现在action中，而且还需要有中间件的支持。</span><br><span class="line">function createThunkMiddleware(extraArgument) &#123;</span><br><span class="line">  return (&#123; dispatch, getState &#125;) =&gt; next =&gt; action =&gt; &#123;</span><br><span class="line">    if (typeof action === &apos;function&apos;) &#123;</span><br><span class="line">      return action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"></span><br><span class="line">export default thunk;</span><br></pre></td></tr></table></figure><p>同步action与异步action最大的区别是：</p><p>同步只返回一个普通action对象。而异步操作中途会返回一个promise函数。当然在promise函数处理完毕后也会返回一个普通action对象。thunk中间件就是判断如果返回的是函数，则不传导给reducer，直到检测到是普通action对象，才交由reducer处理。</p><hr><p>Store 有以下职责：</p><ul><li>提供 getState() 方法获取 state；</li><li>提供 dispatch(action) 方法更新 state；</li><li>通过 subscribe(listener) 注册监听器;</li><li>通过 subscribe(listener) 返回的函数注销监听器。</li></ul><p>==一般情况下，我们只需要getState()和dispatch()方法即可，即可以解决绝大部分问题。==</p><p><strong>我们可以自定义中间件</strong></p><p>比如我们自定义一个可以打印出当前的触发的action以及出发后的state变化的中间件，代码改动如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;;</span><br><span class="line">import rootReducer from &apos;../reducers/rootReudcer&apos;;</span><br><span class="line"></span><br><span class="line">let logger = store =&gt; next =&gt; action =&gt; &#123;</span><br><span class="line">    if(typeof action === &apos;function&apos;) &#123;</span><br><span class="line">        console.log(&apos;dispatching a function&apos;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        console.log(&apos;dispatching&apos;, action);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    let result = next(action);</span><br><span class="line">    // getState() 可以拿到store的状态， 也就是所有数据</span><br><span class="line">    console.log(&apos;next state&apos;, store.getState());</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let middleWares = &#123;</span><br><span class="line">    logger, </span><br><span class="line">    thunk</span><br><span class="line">&#125;</span><br><span class="line">// ... 扩展运算符</span><br><span class="line">let createStoreWithMiddleware = applyMiddleware(...middleWares)(createStore);</span><br><span class="line"></span><br><span class="line">let store = createStoreWithMiddleware(rootReducer);</span><br></pre></td></tr></table></figure><blockquote><p>补充：我们自定义的中间件，也有对应的开源插件，<a href="https://github.com/evgenyrodionov/redux-logger" target="_blank" rel="noopener">redux-logger</a>，人家的更厉害。</p></blockquote><p>如果，app中涉及到登录问题的时候，可以使用<a href="https://www.npmjs.com/package/redux-persist" target="_blank" rel="noopener">redux-persist</a>第三方插件，这个第三方插件来将store对象存储到本地，以及从本地恢复数据到store中，比如说保存登录信息，下次打开应用可以直接跳过登录界面，因为我们目前的应用属于内嵌程序，不登陆的话也进不来，所以不用它。</p><ul><li><strong>Action</strong></li></ul><p>Action 是一个对象，描述了触发的动作，仅此而已。我们约定，action 内必须使用一个字符串类型的 type 字段来表示将要执行的动作。通常它长一下这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: ADD_TODO,</span><br><span class="line">  text: &apos;Build my first Redux app&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>除了 type 字段外，action 对象的结构完全由你自己决定，来看一个复杂点的：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    type: &apos;SET_SCREEN_LAST_REFRESH_TIME&apos;,</span><br><span class="line">    screenId,</span><br><span class="line">    lastRefreshTime,</span><br><span class="line">    objectId</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常我们会添加一个新的模块文件来存储这些actions types，比如我们新建一个actionTypes.js来保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//主页actions</span><br><span class="line">export const FETCH_HOME_LIST = &apos;FETCH_HOME_LIST&apos;;</span><br><span class="line">export const RECEIVE_HOME_LIST = &apos;RECEIVE_HOME_LIST&apos;;</span><br><span class="line">//分类页actions</span><br><span class="line">export const FETCH_CLASS_LIST = &apos;FETCH_CLASS_LIST&apos;;</span><br><span class="line">export const RECEIVE_CLASS_LIST = &apos;RECEIVE_CLASS_LIST&apos;;</span><br><span class="line">//分类详细页actions</span><br><span class="line">export const FETCH_CLASSDITAL_LIST = &apos;FETCH_CLASSDITAL_LIST&apos;;</span><br><span class="line">export const RECEIVE_CLASSDITAL_LIST = &apos;RECEIVE_CLASSDITAL_LIST&apos;;</span><br><span class="line">export const RESET_CLASSDITAL_STATE = &apos;RESET_CLASSDITAL_STATE&apos;; </span><br><span class="line">// 设置页actions</span><br><span class="line">export const CHANGE_SET_SWITCH = &apos;CHANGE_SET_SWITCH&apos;;</span><br><span class="line">export const CHANGE_SET_TEXT = &apos;CHANGE_SET_TEXT&apos;;</span><br><span class="line">// 用户信息</span><br><span class="line">export const USER_INFO = &apos;USER_INFO&apos;;</span><br></pre></td></tr></table></figure><p>引用的时候，可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * as types from &apos;./actionTypes&apos;;</span><br></pre></td></tr></table></figure><ul><li><strong>Action 创建函数(Action Creator)</strong></li></ul><p>Action 创建函数 就是生成 action 的方法。“action” 和 “action 创建函数” 这两个概念很容易混在一起，使用时最好注意区分。在 Redux 中的 action 创建函数只是简单的返回一个 action。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import * as types from &apos;./actionTypes&apos;;</span><br><span class="line">// 设置详情页内容文字主题</span><br><span class="line">let changeText = (theme) =&gt; &#123;</span><br><span class="line">return &#123;</span><br><span class="line">type: types.CHANGE_SET_TEXT,</span><br><span class="line">theme</span><br><span class="line">&#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">// 函数changeText就是一个简单的action creator。</span><br></pre></td></tr></table></figure><p><strong>完整的action文件（setAction.js）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import * as types from &apos;./actionTypes&apos;;</span><br><span class="line"></span><br><span class="line">let setTitle = (value) =&gt; &#123;</span><br><span class="line">return (dispatch, getState) =&gt; &#123;</span><br><span class="line">dispatch(changeValue(value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let setText = (text) =&gt; &#123;</span><br><span class="line">return dispatch =&gt; &#123;</span><br><span class="line">dispatch(changeText(text))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改标题颜色主题</span><br><span class="line">let changeValue = (titleTheme) =&gt; &#123;</span><br><span class="line">return &#123;</span><br><span class="line">type: types.CHANGE_SET_SWITCH,</span><br><span class="line">titleTheme</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置详情页内容文字颜色</span><br><span class="line">let changeText = (textColor) =&gt; &#123;</span><br><span class="line">return &#123;</span><br><span class="line">type: types.CHANGE_SET_TEXT,</span><br><span class="line">textColor</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;</span><br><span class="line">setText,</span><br><span class="line">setTitle</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到上述setTitle、setText函数，返回的并不是一个action对象，而是返回了一个函数，这个默认redux是没法处理的，这就需要使用中间件处理了，redux-thunk中间件用于处理返回函数的函数，上面也介绍了redux-thunk的使用基本方式。</p><ul><li><strong>Reducer</strong></li></ul><p>Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。<br>Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。</p><p>函数签名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(previousState, action) =&gt; newState</span><br></pre></td></tr></table></figure><p>==Reducer必须保持绝对纯净，永远不要在 reducer 里做这些操作：==</p><ul><li>修改传入参数；</li><li>执行有副作用的操作，如 API 请求和路由跳转；</li><li>调用非纯函数，如 Date.now() 或 Math.random()；</li></ul><p>完整的Reducer方法，（setReducer.js）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import * as types from &apos;../actions/actionTypes&apos;;</span><br><span class="line"></span><br><span class="line">const initialState = &#123;</span><br><span class="line">titleTheme: false,</span><br><span class="line">textColor: false</span><br><span class="line">&#125;</span><br><span class="line">// 这里一个技巧是使用 ES6 参数默认值语法 来精简代码</span><br><span class="line">let setReducer = (state = initialState, action) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">switch(action.type)&#123;</span><br><span class="line">case types.CHANGE_SET_SWITCH:</span><br><span class="line">return Object.assign(&#123;&#125;, state, &#123;</span><br><span class="line">titleTheme: action.titleTheme,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">case types.CHANGE_SET_TEXT:</span><br><span class="line">return Object.assign(&#123;&#125;, state, &#123;</span><br><span class="line">textColor: action.textColor</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">default:</span><br><span class="line">return state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default setReducer</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p></blockquote><ul><li>不要修改 state。 使用 Object.assign() 新建了一个副本。不能这样使用 Object.assign(state, {<pre><code>    titleTheme: action.titleTheme,})，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象。你也可以开启对ES7提案对象展开运算符的支持, 从而使用 { ...state, ...newState } 达到相同的目的。</code></pre></li><li>在 default 情况下返回旧的 state。遇到未知的 action 时，一定要返回旧的 state</li></ul><p>==<strong>关于拆分Reducer</strong>==</p><p>这里只是举例了一个简单的功能的reducer，如果有不同的功能，需要设计很多reducer方法，注意每个 reducer 只负责管理全局 state 中它负责的一部分。每个 reducer 的 state 参数都不同，分别对应它管理的那部分 state 数据。</p><p>比如我们这个项目的reducer文件结构：</p><p><img src="http://upload-images.jianshu.io/upload_images/5339345-22685df9481cad4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>其中==rootReducer.js就是一个根reducer文件，使用了Redux 的 combineReducers() 工具类来进行封装整合。==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * rootReducer.js</span><br><span class="line"> * 根reducer</span><br><span class="line"> */</span><br><span class="line">import &#123; combineReducers &#125; from &apos;redux&apos;;</span><br><span class="line">import Home from &apos;./homeReducer&apos;;</span><br><span class="line">import Class from &apos;./classReducer&apos;;</span><br><span class="line">import ClassDetial from &apos;./classDetialReducer&apos;;</span><br><span class="line">import setReducer from &apos;./setReducer&apos;;</span><br><span class="line">import userReducer from &apos;./userReducer&apos;;</span><br><span class="line"></span><br><span class="line">export default rootReducer = combineReducers(&#123;</span><br><span class="line">    Home,</span><br><span class="line">    Class,</span><br><span class="line">    ClassDetial,</span><br><span class="line">    setReducer,</span><br><span class="line">    userReducer,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样根据这个根reducer，可以生成store，请看上文store的创建过程。</p><h4 id="4-redux如何与组件结合"><a href="#4-redux如何与组件结合" class="headerlink" title="4.redux如何与组件结合"></a>4.redux如何与组件结合</h4><p>以上部分介绍了Redux 涉及的基本概念，下面介绍与组件交互的工作流程。</p><p>梳理一下Redux的工作流程：</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg" alt="image"></p><p>1.首先，用户发出 Action。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(action);</span><br></pre></td></tr></table></figure><p>2.Store 自动调用 Reducer，并且传入两个参数：当前 State 和收到的 Action。 Reducer 会返回新的 State 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let nextState = todoApp(previousState, action);</span><br></pre></td></tr></table></figure><p>3.state一旦有变化，Store就会调用监听函数，组件可以感知state的变化，更新View。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let newState = store.getState();</span><br><span class="line">component.setState(newState);</span><br></pre></td></tr></table></figure><p>==具体示例1：==</p><p><img src="http://upload-images.jianshu.io/upload_images/5339345-925cd030c6313047.gif?imageMogr2/auto-orient/strip" alt="fsdf.gif"></p><blockquote><p>设置页面有个switch按钮，可以全局设置标题栏的主题。</p></blockquote><h5 id="代码拆分："><a href="#代码拆分：" class="headerlink" title="代码拆分："></a>代码拆分：</h5><p>1.设置按钮所在组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// SetContainer.js</span><br><span class="line"></span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class="line">import SetPage from &apos;../pages/SetPage&apos;;</span><br><span class="line"></span><br><span class="line">class SetContainer extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;SetPage &#123;...this.props&#125; /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect((state) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    const &#123; setReducer &#125; = state;</span><br><span class="line">    return &#123;</span><br><span class="line">        setReducer</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(SetContainer);</span><br></pre></td></tr></table></figure><p>这是容器组件，将SetPage组件与redux结合起来，其中最重要的方法是connect，这个示例中是将setReducer作为属性传给SetPage组件，关于connect的详解，请移步到<a href="http://www.redux.org.cn/docs/react-redux/api.html" target="_blank" rel="noopener">connect()</a>。</p><p>2.SetPage组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123;</span><br><span class="line">    Component</span><br><span class="line">&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">    StyleSheet,</span><br><span class="line">    Text,</span><br><span class="line">    Image,</span><br><span class="line">    ListView,</span><br><span class="line">    TouchableOpacity,</span><br><span class="line">    View,</span><br><span class="line">    Switch,</span><br><span class="line">    InteractionManager,</span><br><span class="line">&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">import Common from &apos;../common/common&apos;;</span><br><span class="line">import Loading from &apos;../common/Loading&apos;;</span><br><span class="line">import HeaderView from &apos;../common/HeaderView&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;setText,setTitle&#125; from &apos;../actions/setAction&apos;;</span><br><span class="line"></span><br><span class="line">export default class SetPage extends Component &#123;</span><br><span class="line">constructor(props)&#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">switchValue: false,</span><br><span class="line">textValue: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.onValueChange = this.onValueChange.bind(this);</span><br><span class="line">this.onTextChange = this.onTextChange.bind(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">// console.log(this.props)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onValueChange(bool) &#123;</span><br><span class="line">const &#123; dispatch &#125; = this.props;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">switchValue: bool</span><br><span class="line">&#125;)</span><br><span class="line">dispatch(setTitle(bool));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onTextChange(bool) &#123;</span><br><span class="line">const &#123; dispatch &#125; = this.props;</span><br><span class="line"></span><br><span class="line">this.setState(&#123;</span><br><span class="line">textValue: bool</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch(setText(bool));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;View&gt;</span><br><span class="line">        &lt;HeaderView</span><br><span class="line">          titleView= &#123;&apos;设置&apos;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;View&gt;</span><br><span class="line">        &lt;View style=&#123;styles.itemContainer&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;&#123;fontSize: 16&#125;&#125;&gt;全局设置标题主题&lt;/Text&gt;</span><br><span class="line">&lt;Switch </span><br><span class="line">onValueChange=&#123;this.onValueChange&#125;</span><br><span class="line">value=&#123;this.state.switchValue&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line"></span><br><span class="line">&lt;View style=&#123;styles.itemContainer&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;&#123;fontSize: 16&#125;&#125;&gt;设置详情页文字主题&lt;/Text&gt;</span><br><span class="line">&lt;Switch </span><br><span class="line">onValueChange=&#123;this.onTextChange&#125;</span><br><span class="line">value=&#123;this.state.textValue&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">itemContainer:&#123;</span><br><span class="line">paddingLeft: 20,</span><br><span class="line">paddingRight: 20,</span><br><span class="line">height: 40,</span><br><span class="line">flexDirection: &apos;row&apos;,</span><br><span class="line">justifyContent: &apos;space-between&apos;,</span><br><span class="line">alignItems: &apos;center&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以只看全局设置标题主题这个方法，设置详情页文字颜色和他同理。这里可以清晰的看到，用户切换主题switch按钮的时候，触发的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch(setTitle(bool));</span><br></pre></td></tr></table></figure><p>3.我们查看一下setTitle这个action的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// setAction.js</span><br><span class="line">import * as types from &apos;./actionTypes&apos;;</span><br><span class="line"></span><br><span class="line">let setTitle = (value) =&gt; &#123;</span><br><span class="line">return (dispatch, getState) =&gt; &#123;</span><br><span class="line">dispatch(changeValue(value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let setText = (text) =&gt; &#123;</span><br><span class="line">return dispatch =&gt; &#123;</span><br><span class="line">dispatch(changeText(text))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改标题主题</span><br><span class="line">let changeValue = (titleTheme) =&gt; &#123;</span><br><span class="line">return &#123;</span><br><span class="line">type: types.CHANGE_SET_SWITCH,</span><br><span class="line">titleTheme</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置详情页内容文字主题</span><br><span class="line">let changeText = (textColor) =&gt; &#123;</span><br><span class="line">return &#123;</span><br><span class="line">type: types.CHANGE_SET_TEXT,</span><br><span class="line">textColor</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;</span><br><span class="line">setText,</span><br><span class="line">setTitle</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4.action只是负责发送事件，并不会返回一个新的state供页面组件调用，它是在reducer中返回的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// setReducer.js</span><br><span class="line"></span><br><span class="line">import * as types from &apos;../actions/actionTypes&apos;;</span><br><span class="line"></span><br><span class="line">const initialState = &#123;</span><br><span class="line">titleTheme: false,</span><br><span class="line">textColor: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let setReducer = (state = initialState, action) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">switch(action.type)&#123;</span><br><span class="line">case types.CHANGE_SET_SWITCH:</span><br><span class="line">return Object.assign(&#123;&#125;, state, &#123;</span><br><span class="line">titleTheme: action.titleTheme,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">case types.CHANGE_SET_TEXT:</span><br><span class="line">return Object.assign(&#123;&#125;, state, &#123;</span><br><span class="line">textColor: action.textColor</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">default:</span><br><span class="line">return state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default setReducer</span><br></pre></td></tr></table></figure><p>最简单的reducer，就是根据初始值和action对象，返回一个新的state，提供给store，这样，页面里可以从store中获取到这些全局的state，用于更新组件。</p><p>==我们只是写了怎样发送action和接收action发出newState的，下面来看这个标题组件是怎样和redux结合的。==</p><p>5.HeaderView组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by ljunb on 16/5/8.</span><br><span class="line"> * 导航栏标题</span><br><span class="line"> */</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">    StyleSheet,</span><br><span class="line">    View,</span><br><span class="line">    Text,</span><br><span class="line">    Image,</span><br><span class="line">    TouchableOpacity,</span><br><span class="line">&#125; from &apos;react-native&apos;;</span><br><span class="line">import Icon from &apos;react-native-vector-icons/FontAwesome&apos;;</span><br><span class="line">import Common from &apos;../common/common&apos;;</span><br><span class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class="line"></span><br><span class="line">class HeaderView extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props);</span><br><span class="line"></span><br><span class="line">        this.state = &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        // 这里，在这里</span><br><span class="line">        const &#123; titleTheme &#125; = this.props.setReducer;</span><br><span class="line">        let NavigationBar = [];</span><br><span class="line"></span><br><span class="line">        // 左边图片按钮</span><br><span class="line">        if (this.props.leftIcon != undefined) &#123;</span><br><span class="line">            NavigationBar.push(</span><br><span class="line">                &lt;TouchableOpacity</span><br><span class="line">                    key=&#123;&apos;leftIcon&apos;&#125;</span><br><span class="line">                    activeOpacity=&#123;0.75&#125;</span><br><span class="line">                    style=&#123;styles.leftIcon&#125;</span><br><span class="line">                    onPress=&#123;this.props.leftIconAction&#125;</span><br><span class="line">                    &gt;</span><br><span class="line">                    &lt;Icon color=&quot;black&quot; size=&#123;30&#125; name=&#123;this.props.leftIcon&#125;/&gt;</span><br><span class="line">                &lt;/TouchableOpacity&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 标题</span><br><span class="line">        if (this.props.title != undefined) &#123;</span><br><span class="line">            NavigationBar.push(</span><br><span class="line">                &lt;Text key=&#123;&apos;title&apos;&#125; style=&#123;styles.title&#125;&gt;&#123;this.props.title&#125;&lt;/Text&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 自定义标题View</span><br><span class="line">        if (this.props.titleView != undefined) &#123;</span><br><span class="line">            let Component = this.props.titleView;</span><br><span class="line"></span><br><span class="line">            NavigationBar.push(</span><br><span class="line">                &lt;Text key=&#123;&apos;titleView&apos;&#125; style=&#123;[styles.titleView, &#123;color: titleTheme ? &apos;#FFF&apos; : &apos;#000&apos;&#125;]&#125;&gt;&#123;this.props.titleView&#125;&lt;/Text&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return (</span><br><span class="line">            &lt;View style=&#123;[styles.navigationBarContainer, &#123;backgroundColor: titleTheme ? &apos;blue&apos; : &apos;#fff&apos;&#125;]&#125;&gt;</span><br><span class="line">                &#123;NavigationBar&#125;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line"></span><br><span class="line">    navigationBarContainer: &#123;</span><br><span class="line">        marginTop: 20,</span><br><span class="line">        flexDirection: &apos;row&apos;,</span><br><span class="line">        height: 44,</span><br><span class="line">        justifyContent: &apos;center&apos;,</span><br><span class="line">        alignItems: &apos;center&apos;,</span><br><span class="line">        borderBottomColor: &apos;#ccc&apos;,</span><br><span class="line">        borderBottomWidth: 0.5,</span><br><span class="line">        backgroundColor: &apos;white&apos;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    title: &#123;</span><br><span class="line">        fontSize: 15,</span><br><span class="line">        marginLeft: 15,</span><br><span class="line">    &#125;,</span><br><span class="line">    titleView: &#123;</span><br><span class="line">        fontSize: 15,</span><br><span class="line">    &#125;,</span><br><span class="line">    leftIcon: &#123;</span><br><span class="line">       left: -Common.window.width/2+40,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default connect((state) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    const &#123; setReducer &#125; = state;</span><br><span class="line">    return &#123;</span><br><span class="line">        setReducer</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(HeaderView);</span><br></pre></td></tr></table></figure><p>==这个组件同样利用connect方法绑定了redux，变成了容器组件（container component）。==</p><p>connect真的很关键，请详细查看官方文档，上面有链接。</p><p>其他不相关的内容忽略，核心代码是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 拿到全局的state 当有变化的时候，会马上修改</span><br><span class="line">const &#123; titleTheme &#125; = this.props.setReducer;</span><br></pre></td></tr></table></figure><p>==具体示例2：==</p><p><img src="http://upload-images.jianshu.io/upload_images/5339345-c22fb919ad328684.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>利用redux来请求数据、下拉刷新、上拉加载更多。</p><p>1.首先，封装action。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import * as types from &apos;./actionTypes&apos;;</span><br><span class="line">import Util from &apos;../common/utils&apos;; </span><br><span class="line">// action创建函数，此处是渲染首页的各种图片</span><br><span class="line">export let home = (tag, offest, limit, isLoadMore, isRefreshing, isLoading) =&gt; &#123;</span><br><span class="line">    let URL = &apos;http://api.huaban.com/fm/wallpaper/pins?limit=&apos;;</span><br><span class="line">    if (limit) URL += limit;</span><br><span class="line">    offest ? URL += &apos;&amp;max=&apos; + offest : URL += &apos;&amp;max=&apos;;</span><br><span class="line">    tag ? URL += &apos;&amp;tag=&apos; + encode_utf8(tag) : URL += &apos;&amp;tag=&apos;</span><br><span class="line">    </span><br><span class="line">    return dispatch =&gt; &#123;</span><br><span class="line">        // 分发事件  不修改状态   action是 store 数据的唯一来源。</span><br><span class="line">        dispatch(feachHomeList(isLoadMore, isRefreshing, isLoading));</span><br><span class="line">        return Util.get(URL, (response) =&gt; &#123;</span><br><span class="line">            // 请求数据成功后</span><br><span class="line">            dispatch(receiveHomeList(response.pins))</span><br><span class="line">        &#125;, (error) =&gt; &#123;</span><br><span class="line">            // 请求失败</span><br><span class="line">            dispatch(receiveHomeList([]));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function encode_utf8(s) &#123;</span><br><span class="line">    return encodeURIComponent(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 我们约定，action 内必须使用一个字符串类型的 type 字段来表示将要执行的动作。</span><br><span class="line">let feachHomeList = (isLoadMore, isRefreshing, isLoading) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        type: types.FETCH_HOME_LIST,</span><br><span class="line">        isLoadMore: isLoadMore,</span><br><span class="line">        isRefreshing: isRefreshing,</span><br><span class="line">        isLoading: isLoading,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let receiveHomeList = (homeList) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        type: types.RECEIVE_HOME_LIST,</span><br><span class="line">        homeList: homeList,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>feachHomeList表示正在请求数据的动作；</li><li>receiveHomeList表示请求数据完后的动作；</li><li>dispatch(feachHomeList(isLoadMore, isRefreshing, isLoading));表示分发请求数据的动作；</li></ul><p>2.封装reducer函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import * as types from &apos;../actions/actionTypes&apos;;</span><br><span class="line">// 设置初始状态</span><br><span class="line">const initialState = &#123;</span><br><span class="line">    HomeList: [],</span><br><span class="line">    isLoading: true,</span><br><span class="line">    isLoadMore: false,</span><br><span class="line">    isRefreshing: false,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let homeReducer = (state = initialState, action) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case types.FETCH_HOME_LIST:</span><br><span class="line">            return Object.assign(&#123;&#125;, state, &#123;</span><br><span class="line">                isLoadMore: action.isLoadMore,</span><br><span class="line">                isRefreshing: action.isRefreshing,</span><br><span class="line">                isLoading: action.isLoading</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">        case types.RECEIVE_HOME_LIST:</span><br><span class="line">            // 如果请求成功后，返回状态给组件更新数据</span><br><span class="line">            return Object.assign(&#123;&#125;, state, &#123;</span><br><span class="line">            // 如果是正在加载更多，那么合并数据</span><br><span class="line">                HomeList: state.isLoadMore ? state.HomeList.concat(action.homeList) : action.homeList,</span><br><span class="line">                isRefreshing: false,</span><br><span class="line">                isLoading: false,</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        case types.RESET_STATE: // 清除数据</span><br><span class="line">            return Object.assign(&#123;&#125;,state,&#123;</span><br><span class="line">                HomeList:[],</span><br><span class="line">                isLoading:true,</span><br><span class="line">            &#125;)</span><br><span class="line">        default:</span><br><span class="line">            return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default homeReducer;</span><br></pre></td></tr></table></figure><ul><li>这里并没有处理没有更多数据的情况。</li></ul><p>3.容器组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class="line">import Home from &apos;../pages/Home&apos;;</span><br><span class="line"></span><br><span class="line">class HomeContainer extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Home &#123;...this.props&#125; /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect((state) =&gt; &#123;</span><br><span class="line">    const &#123; Home &#125; = state;</span><br><span class="line">    return &#123;</span><br><span class="line">        Home</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(HomeContainer);</span><br></pre></td></tr></table></figure><ul><li>这里主要是利用connect函数将Home  state绑定到Home组件中，并作为它的props；</li></ul><p>4.UI组件</p><ul><li>组件挂载请求数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">let limit = 21;</span><br><span class="line">let offest = &apos;&apos;;</span><br><span class="line">let tag = &apos;&apos;;</span><br><span class="line">let isLoadMore = false;</span><br><span class="line">let isRefreshing = false;</span><br><span class="line">let isLoading = true;</span><br><span class="line">...</span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">    InteractionManager.runAfterInteractions(() =&gt; &#123;</span><br><span class="line">      const &#123;dispatch&#125; = this.props;</span><br><span class="line">      // 触发action 请求数据</span><br><span class="line">      dispatch(home(tag, offest, limit, isLoadMore, isRefreshing, isLoading));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><p>下拉刷新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 下拉刷新</span><br><span class="line">  _onRefresh() &#123;</span><br><span class="line">    if (isLoadMore) &#123;</span><br><span class="line">      const &#123;dispatch, Home&#125; = this.props;</span><br><span class="line">      isLoadMore = false;</span><br><span class="line">      isRefreshing = true;</span><br><span class="line">      dispatch(home(&apos;&apos;, &apos;&apos;, limit, isLoadMore, isRefreshing, isLoading));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>上拉加载更多</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 上拉加载</span><br><span class="line">  _onEndReach() &#123;</span><br><span class="line"></span><br><span class="line">    InteractionManager.runAfterInteractions(() =&gt; &#123;</span><br><span class="line">      const &#123;dispatch, Home&#125; = this.props;</span><br><span class="line">      let homeList = Home.HomeList;</span><br><span class="line">      isLoadMore = true;</span><br><span class="line">      isLoading = false;</span><br><span class="line">      isRefreshing = false;</span><br><span class="line">      offest = homeList[homeList.length - 1].seq</span><br><span class="line">      dispatch(home(tag, offest, limit, isLoadMore, isRefreshing, isLoading));</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>render方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    // 这里可以拿到Home状态</span><br><span class="line">    const &#123; Home,rowDate &#125; = this.props;</span><br><span class="line">     tag = rowDate;</span><br><span class="line">    </span><br><span class="line">    let homeList = Home.HomeList;</span><br><span class="line">    let titleName = &apos;最新&apos;;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;HeaderView</span><br><span class="line">          titleView= &#123;titleName&#125;</span><br><span class="line">          leftIcon=&#123;tag ? &apos;angle-left&apos; : null&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &#123;Home.isLoading ? &lt;Loading /&gt; :</span><br><span class="line">          &lt;ListView</span><br><span class="line">            dataSource=&#123;this.state.dataSource.cloneWithRows(homeList) &#125;</span><br><span class="line">            renderRow=&#123;this._renderRow&#125;</span><br><span class="line">            contentContainerStyle=&#123;styles.list&#125;</span><br><span class="line">            enableEmptySections=&#123;true&#125;</span><br><span class="line">            initialListSize= &#123;10&#125;</span><br><span class="line">            onScroll=&#123;this._onScroll&#125;</span><br><span class="line">            onEndReached=&#123;this._onEndReach.bind(this) &#125;</span><br><span class="line">            onEndReachedThreshold=&#123;10&#125;</span><br><span class="line">            renderFooter=&#123;this._renderFooter.bind(this) &#125;</span><br><span class="line">            style=&#123;styles.listView&#125;</span><br><span class="line">            refreshControl=&#123;</span><br><span class="line">              &lt;RefreshControl</span><br><span class="line">                refreshing=&#123;Home.isRefreshing&#125;</span><br><span class="line">                onRefresh=&#123;this._onRefresh.bind(this) &#125;</span><br><span class="line">                title=&quot;正在加载中……&quot;</span><br><span class="line">                color=&quot;#ccc&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">            &#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>至此，一个简单的Reducer程序完成了，我们稍微总结一下：</strong></p><ul><li>整个应用只有一个store，用来保存所有的状态，视图不需要自己维护状态。</li><li>视图通过connect函数绑定到store，当store状态变化后，store会通知视图刷新。</li><li>触发一个action之后，会经过可能N个reducers处理，最后根reducer会将所有reducers处理之后的状态合并，然后交给store，store再通知视图刷新。</li></ul><p><strong>本文的源码地址：</strong> <a href="http://pan.baidu.com/s/1pLTyU9t" target="_blank" rel="noopener">案例</a>，提取码： lt1x</p><p><strong>参考链接：</strong></p><ul><li><a href="http://www.redux.org.cn/" target="_blank" rel="noopener">Redux中文文档</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="noopener">Redux 入门教程-阮一峰</a></li><li><a href="https://zhongjie-chen.github.io/blog/2015/09/18/%E7%9C%8B%E6%BC%AB%E7%94%BB-%E5%AD%A6-Redux/" target="_blank" rel="noopener">看漫画，学 Redux</a></li><li><a href="http://www.jianshu.com/p/2c43860b0532" target="_blank" rel="noopener">在react-native中使用redux</a></li><li><a href="http://www.jianshu.com/p/f1a3c7845bb9" target="_blank" rel="noopener">[React Native]Redux的基本使用方式</a></li><li><a href="http://luoxia.me/code/2016/10/04/Redux%E7%AE%A1%E7%90%86%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E6%95%B0%E6%8D%AE%E9%80%BB%E8%BE%91/" target="_blank" rel="noopener">Redux管理复杂应用数据逻辑</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React javascript redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高阶函数和Redux源码分析</title>
      <link href="/blog/2018/08/02/js%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%92%8CRedux%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/blog/2018/08/02/js%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%92%8CRedux%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="一、函数式编程的概念"><a href="#一、函数式编程的概念" class="headerlink" title="一、函数式编程的概念"></a>一、函数式编程的概念</h3><h4 id="1-总体概念"><a href="#1-总体概念" class="headerlink" title="1.总体概念"></a>1.总体概念</h4><blockquote><p>函数式编程通过使用函数来将值转换成抽象单元，接着用于构建软件系统。</p></blockquote><ul><li>以函数为抽象单元</li><li>封装和隐藏</li><li>以函数为行为单位</li><li>数据抽象<a id="more"></a>通常函数式编程是相对于其他的编程方式来说的：</li><li>1.命令式编程<pre><code>直接操作；检查程序状态；</code></pre></li><li>2.面向对象（OOP）、类</li><li>3.元编程（略）</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5339345-f958b5d9353ae6a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通过函数组合来实现具体的行为"></p><p>少啰嗦，看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redux中的compose函数，一个返回函数的组合函数</span></span><br><span class="line"><span class="comment">// A function obtained by composing the argument functions</span></span><br><span class="line"><span class="comment">// from right to left. For example, compose(f, g, h) is identical to doing</span></span><br><span class="line"><span class="comment">// (...args) =&gt; f(g(h(...args))).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> a(b(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h4><ul><li><p><strong>函数是”第一等公民”</strong></p><p>  一等公民意思是函数可以作为任何值可以去任何地方：</p></li><li><input checked disabled type="checkbox"> <p>1.函数可以与数字一样存储为变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var fortytwo = function() &#123; return 42 &#125;;</span><br></pre></td></tr></table></figure></li><li><input checked disabled type="checkbox"> <p>2.函数与数字一样可以存储为数组的一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var fortytwo = [32, function()&#123;return 42&#125;]</span><br></pre></td></tr></table></figure></li><li><input checked disabled type="checkbox"> <p>3.函数与数字一样可以作为对象的成员变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var fortytwo = &#123;number: 32, fun: function()&#123;return 42&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><input checked disabled type="checkbox"> <p>4.函数与数字一样可以在使用时直接创建出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">32 + (function()&#123;return 42&#125;) ()</span><br></pre></td></tr></table></figure></li><li><input checked disabled type="checkbox"> <p>5.函数与数字一样可以被传递给另一个函数( 高阶函数 )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function weirdAdd(n, f)&#123; return n + f()&#125;;</span><br><span class="line">weirdAdd(32, function()&#123;return 42&#125;)</span><br></pre></td></tr></table></figure></li><li><input checked disabled type="checkbox"> <p>6.函数与数字一样可以被另一个函数返回（高阶函数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">return 32;</span><br><span class="line">return function()&#123;return 42&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>没有”副作用”</strong></p></li></ul><p>函数的职责单一，保持独立，没有其他行为，尤其不能修改外部变量的值。</p><ul><li><strong>不修改状态</strong></li></ul><p>redux中的reducer就是纯函数，必须返回一个新的对象，而不是修改初始对象，为什么？因为函数式编程只是返回新的值，不修改系统变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import * as home from &apos;./actionType&apos;;</span><br><span class="line">// 初始化默认登录信息</span><br><span class="line">let initialState = &#123;</span><br><span class="line">userId: null,</span><br><span class="line">apkVer: null,</span><br><span class="line">initError: false</span><br><span class="line">&#125;</span><br><span class="line">// home reducer</span><br><span class="line">export const initReducer = (state = initialState, action = &#123;&#125;) =&gt; &#123;</span><br><span class="line">switch(action.type) &#123;</span><br><span class="line">case home.INITHOME:</span><br><span class="line">return Object.assign(&#123;&#125;, state, &#123;</span><br><span class="line">userId: action.userId,</span><br><span class="line">apkVer: action.apkVer,</span><br><span class="line">initError: action.initError,</span><br><span class="line">&#125;);</span><br><span class="line">default :</span><br><span class="line">return state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>纯函数</strong></p></li><li><input checked disabled type="checkbox"> <p>其结果只能从它的参数的值来计算</p></li><li><input checked disabled type="checkbox"> <p>不能依赖于能被外部操作改变的数据（比如Math.random会让代码变得难以测试）</p></li><li><input checked disabled type="checkbox"> <p>不能改变外部状态</p></li></ul><h3 id="二、递归（自吸收函数）"><a href="#二、递归（自吸收函数）" class="headerlink" title="二、递归（自吸收函数）"></a>二、递归（自吸收函数）</h3><ul><li>实现deepClone<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function deepClone(obj) &#123;</span><br><span class="line">if(!exity(obj) || !_.isObject(obj)) &#123;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line">var temp = new obj.constructor();</span><br><span class="line">for(var key in obj) &#123;</span><br><span class="line">if(obj.hasOwnProperty(key)) &#123;</span><br><span class="line">temp[key] = deepClone(obj[key]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>因为js引擎并没有对递归进行优化调用，一般不推荐使用，优先考虑函数组合的方式。<br><a href="http://www.infoq.com/cn/articles/react-dom-diff" target="_blank" rel="noopener">react的diff算法优化</a></p><h3 id="三、高阶函数"><a href="#三、高阶函数" class="headerlink" title="三、高阶函数"></a>三、高阶函数</h3><blockquote><p>以一个函数作为参数，并返回另一个函数。</p></blockquote><h5 id="1-以下列举常见的高阶函数"><a href="#1-以下列举常见的高阶函数" class="headerlink" title="1.以下列举常见的高阶函数"></a>1.以下列举常见的高阶函数</h5><ul><li><strong>作为参数传递</strong></li></ul><p>es3版本的ajax：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function ajaxGet(URL, queryJSON, callback) &#123;// callback为待传入的回调函数</span><br><span class="line">    var xhr = null;</span><br><span class="line">    if(window.XMLHttpRequest)&#123;</span><br><span class="line">        xhr = new XMLHttpRequest();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); </span><br><span class="line">    &#125;</span><br><span class="line">    // 必须携带cookie</span><br><span class="line">    xhr.withCredentials = true;</span><br><span class="line">    xhr.onreadystatechange = function()&#123;</span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">            if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304)&#123;</span><br><span class="line">                callback(null,JSON.parse(xhr.responseText));</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                callback(new Error(&quot;没有找到请求的文件&quot;), undefined);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var querystring = _jsonToString(queryJSON);</span><br><span class="line">    URL = querystring ? (URL + querystring) : URL;</span><br><span class="line">    xhr.open(&apos;GET&apos;,URL,true);</span><br><span class="line">    xhr.send(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>作为返回值</strong><br>单例模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var getSingle = function(fn) &#123;</span><br><span class="line">var result;</span><br><span class="line">return function() &#123;</span><br><span class="line">return result || (result = fn.apply(null, arguments));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工作中应用场景：==在打开native短信的时候，使用iframe的src属性来进行唤起短信操作：==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 管理单例模式</span><br><span class="line">getSingle(fn) &#123;</span><br><span class="line">let result;</span><br><span class="line">return () =&gt; result || (result = fn.apply(null, arguments));</span><br><span class="line">&#125;</span><br><span class="line">// 创建iframe</span><br><span class="line">createIframe() &#123;</span><br><span class="line">this.getSingle(() =&gt; &#123;</span><br><span class="line">let ifr = document.createElement(&apos;iframe&apos;);</span><br><span class="line">ifr.style.opacity = 0;</span><br><span class="line">document.body.appendChild(ifr);</span><br><span class="line">return ifr;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">_phoneNumList() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">M_BJOB.fetchContactInfo((res) =&gt; &#123;</span><br><span class="line">res = JSON.parse(res);</span><br><span class="line">console.log(res);</span><br><span class="line">const codeType = parseInt(res.errorCode);</span><br><span class="line">if (codeType == 0) &#123;</span><br><span class="line">let phoneNum = parseInt(res.phone);</span><br><span class="line">let username = res.name;</span><br><span class="line">if (isIos) &#123;</span><br><span class="line">// ios发短信  使用iframe 安卓中使用window.open</span><br><span class="line">let iframeView = this.createIframe();</span><br><span class="line">iframeView.src = `sms:$&#123;phoneNum&#125;&amp;body=$&#123;username&#125;测试短信，这里有个网址www.baidu.com你点不点，发给ios`;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">window.open(`sms:$&#123;phoneNum&#125;?body=$&#123;username&#125;测试短信，这里有个网址www.baidu.com你点不点,发给android`);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (codeType == 1) &#123;</span><br><span class="line">Toast.show(&apos;您已取消&apos;);</span><br><span class="line">&#125; else if(codeType == 4)&#123;</span><br><span class="line">Toast.show(&apos;该设备没有通讯录&apos;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">Toast.show(&apos;没有通讯录权限&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">console.log(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>currying、uncurrying</strong></p></li></ul><p>currying（函数柯里化），又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保存起来。待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。</p><p>比如我们编写一个计算月开销的程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var monthlyCost = 0;</span><br><span class="line">var cost = function(money) &#123;</span><br><span class="line">monthlyCost += money;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cost(100);// 第一天开销</span><br><span class="line">cost(200);// 第二天开销</span><br><span class="line">cost(300);// 第30天开销</span><br><span class="line"></span><br><span class="line">alert(monthlyCost); // 这就是总共的开销</span><br></pre></td></tr></table></figure><p>改进：<br>    如果我们每个月都保存(闭包)一份值，但不计算，等到月底时再统一计算，这样会更合理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var cost = (function() &#123;</span><br><span class="line">var args = [];</span><br><span class="line">return function() &#123;</span><br><span class="line">if(arguments.length === 0) &#123;</span><br><span class="line">// 求值</span><br><span class="line">var money = 0; // money变量保存在内存中</span><br><span class="line">for(var i=0;i&lt;args.length;i++) &#123;</span><br><span class="line">money += args[i];</span><br><span class="line">&#125;</span><br><span class="line">return money;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">[].push.apply(args, arguments);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">cost(100); // 存值不求值</span><br><span class="line">cost(200); // 存值不求值</span><br><span class="line">cost(300); // 存值不求值</span><br><span class="line">cost(400); // 存值不求值</span><br><span class="line"></span><br><span class="line">cost();    // 1000 求值</span><br></pre></td></tr></table></figure><p>再次改进，直接柯里化:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 通用currying函数，接受一个参数，即将要被currying的函数</span><br><span class="line">var currying = function(fn) &#123;</span><br><span class="line">    var args = [];</span><br><span class="line">    return function() &#123;</span><br><span class="line">        if (arguments.length === 0) &#123;</span><br><span class="line">            return fn.apply(this, args);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            [].push.apply(args, arguments);</span><br><span class="line">            return arguments.callee;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 将被currying的函数</span><br><span class="line">var cost = (function() &#123;</span><br><span class="line">    var money = 0;</span><br><span class="line">    return function() &#123;</span><br><span class="line">        for (var i = 0, l = arguments.length; i &lt; l; i++) &#123;</span><br><span class="line">            money += arguments[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">var cost = currying(cost);</span><br><span class="line"></span><br><span class="line">cost( 100 );    // 未真正求值</span><br><span class="line">cost( 200 );    // 未真正求值</span><br><span class="line">cost( 300 );    // 未真正求值</span><br><span class="line"></span><br><span class="line">console.log (cost());     // 求值并输出：600</span><br></pre></td></tr></table></figure><ul><li><strong>函数节流</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// fe-react/src/helpers/throttle.js中</span><br><span class="line">export const throttle_with_lock = (f, th = 100) =&gt; &#123;</span><br><span class="line">  let lock = false</span><br><span class="line">  return () =&gt; &#123;</span><br><span class="line">    if(lock) &#123;</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    f.apply(null, arguments)</span><br><span class="line">    setTimeout( () =&gt; &#123;</span><br><span class="line">      lock = false</span><br><span class="line">    &#125;, th)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>基本思想：<br>    throttle函数的原理是，将即将被执行的函数用setTimeout延迟一段时间执行。如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求。</p><p>此段代码问题：</p><pre><code>1.lock变量失效，始终未true；2.没有做到标准的清除定时器的程序；3.没有修正this的指向；</code></pre><p>优化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">export const throttle_with_lock = (f, th = 100) =&gt; &#123;</span><br><span class="line">  let lock = true;</span><br><span class="line">  let timer;</span><br><span class="line">  let _me = this;</span><br><span class="line">  </span><br><span class="line">  return () =&gt; &#123;</span><br><span class="line">    if(lock) &#123;// 如果第一次调用，不需要延迟执行</span><br><span class="line">f.apply(_me, arguments);</span><br><span class="line">return lock = false; // 锁住</span><br><span class="line">    &#125;</span><br><span class="line">    if(timer) &#123;// 如果定时器还在执行，取消</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    timer = setTimeout( () =&gt; &#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = null;</span><br><span class="line">    f.apply(null, arguments)</span><br><span class="line">    &#125;, th);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>react高阶组件</strong></li></ul><p><a href="http://note.youdao.com/noteshare?id=61d8f0d8ef09b605467afa90931d99ea" target="_blank" rel="noopener">移步另一篇分享HOC</a></p><h3 id="四、Redux源码分析-（V4-0-0）"><a href="#四、Redux源码分析-（V4-0-0）" class="headerlink" title="四、Redux源码分析  （V4.0.0）"></a>四、Redux源码分析  （V4.0.0）</h3><h4 id="1-redux工作流"><a href="#1-redux工作流" class="headerlink" title="1.redux工作流"></a>1.redux工作流</h4><p>如图所示：<br><img src="https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0=baike92,5,5,92,30/sign=f8ca2379efcd7b89fd6132d16e4d29c2/6a600c338744ebf83681478cd0f9d72a6159a794.jpg" alt="enter image description here"></p><p>分析：</p><ul><li>1.用户发出action；</li></ul><blockquote><p>store.dispatch(action);</p></blockquote><ul><li>2.store自动调用reducer函数，生成newState；</li></ul><blockquote><p>reducer  =（preState，action） =&gt; newState;</p></blockquote><ul><li>3.UI根据新得到的state，更新view；</li></ul><blockquote><p>一旦state有变化，store就会调用监听函数  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.subscribe(listener);</span><br></pre></td></tr></table></figure><blockquote><p>listener可以通过store.getState()得到当前状态，如果使用的是react，这时可以触发重新渲染View：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function listener() &#123;</span><br><span class="line">let newState = store.getState();</span><br><span class="line">component.setState(newState)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4.redux主体代码包括</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">createStore.js                创建store</span><br><span class="line">bindActionCreators.js         简化某个action的调用</span><br><span class="line">combineReducers.js            组合reducers</span><br><span class="line">compose.js                    compose(f, g, h)  ---&gt;  (...args) =&gt; f(g(h(...args))) 函数编程的常见模式</span><br><span class="line">applyMiddleware.js            使用中间件来扩展redux</span><br></pre></td></tr></table></figure><h4 id="2-createStore-js"><a href="#2-createStore-js" class="headerlink" title="2.createStore.js"></a>2.createStore.js</h4><blockquote><p>createStore  接受reducer生成Store，以后每当store.dispatch发送过来一个新的Action，就会自动调用reducer，得到新的state；</p></blockquote><p>createStore的核心源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let currentReducer = reducer             // 当前reducer</span><br><span class="line">let currentState = preloadedState        // 当前的state</span><br><span class="line">let currentListeners = []                // 当前的所有订阅-listeners</span><br><span class="line">let nextListeners = currentListeners     // 下一次订阅，nextListeners 和 currentListeners 指向同一个引用</span><br><span class="line">let isDispatching = false                // 标记是否正在进行dispatching状态中</span><br><span class="line"></span><br><span class="line">// 1.保存订阅快照  确保currentListeners 和 nextListeners 是不同的引用</span><br><span class="line">function ensureCanMutateNextListeners() &#123;&#125;;</span><br><span class="line">// 2.返回当前的所有state</span><br><span class="line">function getState() &#123;&#125;;</span><br><span class="line">// 3.订阅监听</span><br><span class="line">function subscribe(listener) &#123;&#125;;</span><br><span class="line">// 4.发送action，唯一改变state的方法</span><br><span class="line">function dispatch(action) &#123;&#125;;</span><br><span class="line">// 5.替换reducer</span><br><span class="line">function replaceReducer(nextReducer) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 初始化action</span><br><span class="line">dispatch(&#123; type: ActionTypes.INIT &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 返回</span><br><span class="line">return &#123;</span><br><span class="line">  dispatch,</span><br><span class="line">  subscribe,</span><br><span class="line">  getState,</span><br><span class="line">  replaceReducer,</span><br><span class="line">  [$$observable]: observable</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>ensureCanMutateNextListeners函数：</strong></li></ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">   保存一份订阅快照</span><br><span class="line"> */</span><br><span class="line"> function ensureCanMutateNextListeners() &#123;</span><br><span class="line">   if (nextListeners === currentListeners) &#123;</span><br><span class="line">     // 复制一份listeners，赋值给nextListeners</span><br><span class="line">     nextListeners = currentListeners.slice()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 此函数为保存订阅快照功能，调用的地方是：subscribe(listener)方法。源码很简单，主要功能就是：</p><blockquote><p>1.每次订阅和取消订阅的时候，保证nextListeners和currentListeners不是同一个引用，改变nextListeners的值，不影响currentListeners的值；</p></blockquote><blockquote><p>2.每次dispatch的时候，当reducer执行完毕，订阅执行前，让nextListeners和currentListeners是同一个引用,如下代码所示：</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> try &#123;</span><br><span class="line">  isDispatching = true</span><br><span class="line">  // 重点：reducer接受当前state和action输出new state</span><br><span class="line">  currentState = currentReducer(currentState, action)</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  isDispatching = false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 让nextListeners和currentListeners是同一个引用，相当于更新了currentListeners为nextListeners，然后再通知订阅者执行；</span><br><span class="line">const listeners = (currentListeners = nextListeners)</span><br><span class="line"></span><br><span class="line">// 逐个执行订阅的函数</span><br><span class="line">for (let i = 0; i &lt; listeners.length; i++) &#123;</span><br><span class="line">  const listener = listeners[i]</span><br><span class="line">  listener()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为啥这么设计呢，既存在currentListeners也存在nextListeners？</p><p>==因为，如果在listener()执行过程中，又发生了subscribe()或者unsubscribe()，那么会随意修改listeners的值，会存在不确定性，所以，使用保存快照的方法，使得在订阅执行过程中，又有了新的删除和添加时，下次生效！不要影响此次订阅的执行过程。==</p><ul><li><strong>replaceReducer函数：</strong></li></ul><p>这是对外暴露的高级API，源码超级简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function replaceReducer(nextReducer) &#123;</span><br><span class="line">    if (typeof nextReducer !== &apos;function&apos;) &#123;</span><br><span class="line">      throw new Error(&apos;Expected the nextReducer to be a function.&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    currentReducer = nextReducer</span><br><span class="line">    dispatch(&#123; type: ActionTypes.REPLACE &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>外部可以直接调用这个api来替换当前的currentReducer，然后执行dispatch，所有的reducer会返回初始值（previousState），会得到一个初始化的store树。</p></blockquote><h4 id="3-bindActionCreators-js"><a href="#3-bindActionCreators-js" class="headerlink" title="3.bindActionCreators.js"></a>3.bindActionCreators.js</h4><blockquote><p>bindActionCreators的作用就是简化dispatch的调用过程，对dispatch的一种封装，可以隐式调用dispatch，一般结合在react-redux中使用。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    以前触发一个action，执行的是dispatch(actionCreator(...args))；</span><br><span class="line">    现在变成了触发一个action:bindActionCreator(...args)；</span><br><span class="line">    </span><br><span class="line">    也可以写成：</span><br><span class="line">    </span><br><span class="line">    function bindActionCreator(actionCreator, dispatch) &#123;</span><br><span class="line">        return (...args) =&gt; dispatch(actionCreator(...args));</span><br><span class="line">    &#125;</span><br><span class="line">*/</span><br><span class="line">function bindActionCreator(actionCreator, dispatch) &#123;</span><br><span class="line">  return function() &#123;</span><br><span class="line">    return dispatch(actionCreator.apply(this, arguments))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function bindActionCreators(actionCreators, dispatch) &#123;</span><br><span class="line">  // 如果只有一个actionCreator，那就直接调用就可以</span><br><span class="line">  if (typeof actionCreators === &apos;function&apos;) &#123;</span><br><span class="line">    return bindActionCreator(actionCreators, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line">  // actionCreators 必须是function或者object</span><br><span class="line">  if (typeof actionCreators !== &apos;object&apos; || actionCreators === null) &#123;</span><br><span class="line">    throw new Error(</span><br><span class="line">      `bindActionCreators expected an object or a function, instead received $&#123;</span><br><span class="line">        actionCreators === null ? &apos;null&apos; : typeof actionCreators</span><br><span class="line">      &#125;. ` +</span><br><span class="line">        `Did you write &quot;import ActionCreators from&quot; instead of &quot;import * as ActionCreators from&quot;?`</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  // 迭代actionCreators，对每一个key对应的actionCreator执行bindActionCreator操作</span><br><span class="line">  const keys = Object.keys(actionCreators)</span><br><span class="line">  const boundActionCreators = &#123;&#125;</span><br><span class="line">  for (let i = 0; i &lt; keys.length; i++) &#123;</span><br><span class="line">    const key = keys[i]</span><br><span class="line">    const actionCreator = actionCreators[key]</span><br><span class="line">    if (typeof actionCreator === &apos;function&apos;) &#123;</span><br><span class="line">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return boundActionCreators</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 此函数作用简单：对actionCreators里包含的每一个actionCreator按照key值进行了封装。</span><br></pre></td></tr></table></figure><h4 id="4-combineReducers-js"><a href="#4-combineReducers-js" class="headerlink" title="4.combineReducers.js"></a>4.combineReducers.js</h4><blockquote><p>combineReducers()做的就是产生一个整体的Reducer函数，该函数根据state的key去执行相应的子Reducer，并将返回的结果合成一个大的state对象。</p></blockquote><blockquote><p>最终，state对象的结构会是这样：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    reducer1: ...</span><br><span class="line">    reducer2: ...</span><br><span class="line">    reducer3: ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>combineReducers的简单实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const combineReducers = (reducers) =&gt; &#123;</span><br><span class="line">  //  这里传入的state，实际上就是根state，所以得根据属性名来获取对应的reducer上的state，看createStore的代码：</span><br><span class="line">  /*</span><br><span class="line">    ...</span><br><span class="line">    try &#123;</span><br><span class="line">      isDispatching = true</span><br><span class="line">      // 重点：reducer接受当前state和action输出new state</span><br><span class="line">      currentState = currentReducer(currentState, action)</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      isDispatching = false</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  */</span><br><span class="line">  return (state=&#123;&#125;, action) =&gt; &#123;</span><br><span class="line">    return Object.keys(reducers).reduce((nextState, reducerKey) =&gt; &#123;</span><br><span class="line">      // 根据属性值执行相应的reducer，然后返回相应的state</span><br><span class="line">      nextState[reducerKey] = reducers[reducerKey](state[reducerKey], action);</span><br><span class="line">      return nextState;</span><br><span class="line">    &#125;, &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-compose-js"><a href="#5-compose-js" class="headerlink" title="5.compose.js"></a>5.compose.js</h4><blockquote><p>传入一组函数，会从右到左逐个执行函数，此函数是函数式编程的常见套路。这里的compose方法用在了applyMiddleware.js中</p></blockquote><p>源码很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export default function compose(...funcs) &#123;</span><br><span class="line">  if (funcs.length === 0) &#123;</span><br><span class="line">    return arg =&gt; arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (funcs.length === 1) &#123;</span><br><span class="line">    return funcs[0]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return funcs.reduce((a, b) =&gt; (...args) =&gt; a(b(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-applyMiddleware-js"><a href="#6-applyMiddleware-js" class="headerlink" title="6.applyMiddleware.js"></a>6.applyMiddleware.js</h4><blockquote><p>该函数是处理中间件的函数，redux的正常流程是dispatch一个action，就会到达reducer，而middleWare就是允许我们在dispatch action之后，到达reducer之前，搞点事情。</p></blockquote><blockquote><p>middleWare的原理就是：将store.dispatch进行替换，dispatch的功能不变，但是增强了它，就是装饰者模式的落地。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let next = store.dispatch;</span><br><span class="line">store.dispatch = function(action) &#123;</span><br><span class="line">  console.log(&apos;dispatching&apos;);</span><br><span class="line">  next(action);</span><br><span class="line">  console(store.getState());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>applyMiddleware使用方式：<figure class="highlight plain"><figcaption><span>store </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">下面就是全部源码：</span><br></pre></td></tr></table></figure></p></blockquote><p>import compose from ‘./compose’</p><p>export default function applyMiddleware(…middlewares) {<br>  /*<br>    …args实际上就是（reducer, preloadedState, enhancer）<br>  */<br>  return createStore =&gt; (…args) =&gt; {<br>    // 创建一个store<br>    const store = createStore(…args)<br>    // 声明dispatch，注意，此dispatch非store.dispatch。之前的版本的源码是这样写的：let _dispatch = store.dispatch;<br>    let dispatch = () =&gt; {<br>      throw new Error(<br>        <code>Dispatching while constructing your middleware is not allowed.</code> +<br>          <code>Other middleware would not be applied to this dispatch.</code><br>      )<br>    }</p><pre><code>const middlewareAPI = {  getState: store.getState,  dispatch: (...args) =&gt; dispatch(...args)}// getState和dispatch是中间件用到的api，所以要传给每个中间件使用const chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))// 这里就是将store.dispatch增强，然后返回这个增强的dispatch，这是最核心的原理部分dispatch = compose(...chain)(store.dispatch)return {  ...store,  dispatch}</code></pre><p>  }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**看一下常见的中间件：**</span><br><span class="line"></span><br><span class="line">1.thunk</span><br></pre></td></tr></table></figure><p>function createThunkMiddleware(extraArgument) {<br>    return ({ dispatch, getState }) =&gt; next =&gt; action =&gt; {</p><pre><code>  if (typeof action === &apos;function&apos;) {    return action(dispatch, getState, extraArgument);  }  return next(action);};</code></pre><p>  }</p><p>const thunk = createThunkMiddleware();</p><p>export default thunk;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于applyMiddleware中对每个middleware的处理是：```const chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))```，给每个中间件传入的参数是```(&#123;dispatch, getState&#125;)```，所以，```thunk```中接受的第一个参数正是：```(&#123; dispatch, getState &#125;)</span><br></pre></td></tr></table></figure><p>由于applyMiddleware中增强dispatch的方法是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">由于每个中间件都```return next(action)```，所以，这样就形成了```dispatch(action)```的链式传递，当所有的中间件执行完毕，再真正执行```dispatch(action)```。</span><br><span class="line"></span><br><span class="line">**举个栗子：**</span><br></pre></td></tr></table></figure></p><p>// redux-thunk中间件<br>function createThunkMiddleware(extraArgument) {<br>    return ({ dispatch, getState }) =&gt; next =&gt; action =&gt; {</p><pre><code>    console.log(next, &apos;next&apos;);    console.log(action, &apos;action&apos;);  if (typeof action === &apos;function&apos;) {    return action(dispatch, getState, extraArgument);  }  return next(action);};</code></pre><p>  }</p><p>const thunk = createThunkMiddleware();</p><p>// logger中间件<br>function loggerMiddleware(extraArgument) {<br>    return ({ dispatch, getState }) =&gt; next =&gt; action =&gt; {<br>        console.log(action);<br>        return next(action);<br>    }<br>}</p><p>const logger = loggerMiddleware();</p><p>const store = applyMiddleware(thunk, logger)(createStore)(reducer);<br>```<br>参考链接和文献<br>链接：</p><p><a href="https://segmentfault.com/a/1190000012008266#articleHeader2" target="_blank" rel="noopener">JavaScript高阶函数的应用</a></p><p><a href="https://blog.csdn.net/liusheng95/article/details/53445202#t17" target="_blank" rel="noopener">JavaScript函数式编程概览</a></p><p><a href="https://segmentfault.com/a/1190000007737370" target="_blank" rel="noopener">史上最全的Redux源码分析</a></p><p><a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">Redux源码</a></p><p><a href="https://segmentfault.com/a/1190000010731933" target="_blank" rel="noopener">JS之reduce函数进阶</a></p><p>书：</p><p><a href>JavaScript函数式编程 PDF Michael Fogus</a></p><p><a href>JavaScript设计模式与开发实践 -曾探</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Navigation最佳实践</title>
      <link href="/blog/2017/10/10/React%20Navigation%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/blog/2017/10/10/React%20Navigation%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="本文是基于最新的react-navigation-1-0-0-beta-13来总结的。"><a href="#本文是基于最新的react-navigation-1-0-0-beta-13来总结的。" class="headerlink" title="本文是基于最新的react-navigation^1.0.0-beta.13来总结的。"></a>本文是基于最新的react-navigation^1.0.0-beta.13来总结的。</h3><h4 id="1-为啥使用react-navigation？"><a href="#1-为啥使用react-navigation？" class="headerlink" title="1.为啥使用react-navigation？"></a>1.为啥使用react-navigation？</h4><ul><li><p>react-navigation比Navigator更加流畅，体验要好一些；</p></li><li><p>编码更规范，有层次感，易于管理维护；</p></li><li><p>官方推荐，没有发现明显的bug，且用户量大，社区活跃，文档齐全。</p><a id="more"></a><h4 id="2-参考链接"><a href="#2-参考链接" class="headerlink" title="2.参考链接"></a>2.参考链接</h4></li><li><p><a href="https://reactnavigation.org/docs/navigators/tab" target="_blank" rel="noopener">官方文档</a></p></li><li><p><a href="http://www.jianshu.com/p/2f575cc35780" target="_blank" rel="noopener">react-navigation使用技巧</a></p></li><li><p><a href="http://www.jianshu.com/p/b877115fff1b" target="_blank" rel="noopener">react-navigation使用技巧(进阶篇)</a></p></li><li><p><a href="https://github.com/jaggerwang/zqc-app-demo" target="_blank" rel="noopener">一个用react-navigation写的较大型的app，结合redux，参考性强</a></p></li><li><p><a href="http://www.jianshu.com/p/bf30b66bbd58" target="_blank" rel="noopener">前端大神写的，必看!</a></p></li></ul><h4 id="3-功能"><a href="#3-功能" class="headerlink" title="3.功能"></a>3.功能</h4><ul><li>StackNavigator<br>  类似顶部导航条，用来跳转页面和传递参数。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5339345-6dc8f6cb91fd57d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="image.png"></p><ul><li>TabNavigator<br>  类似底部标签栏，用来区分模块。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5339345-9355977268cb69bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="image.png"></p><ul><li>DrawerNavigator<br>抽屉，类似从App左侧滑出一个页面，==实际实用性不大==，我们一般用到的是<a href="http://reactnative.cn/docs/0.48/drawerlayoutandroid.html#content" target="_blank" rel="noopener">DrawerLayoutAndroid</a>或是其他开源组件，所以在这里不做讲解。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5339345-1c4c07805bf26dc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="20160708152335923.png"></p><h4 id="4-相关api及基本用法"><a href="#4-相关api及基本用法" class="headerlink" title="4.相关api及基本用法"></a>4.相关api及基本用法</h4><blockquote><p>看文档或者其他介绍文档文章</p></blockquote><h4 id="5-最佳实践"><a href="#5-最佳实践" class="headerlink" title="5.最佳实践"></a>5.最佳实践</h4><h6 id="以“在球场app”为例，它把所有的导航都封装在了一个文件中（navigation-js）"><a href="#以“在球场app”为例，它把所有的导航都封装在了一个文件中（navigation-js）" class="headerlink" title="以“在球场app”为例，它把所有的导航都封装在了一个文件中（navigation.js）:"></a>以“在球场app”为例，它把所有的导航都封装在了一个文件中（navigation.js）:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在球场</span></span><br><span class="line"><span class="comment"> * zaiqiuchang.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;StackNavigator, TabNavigator&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;COLOR&#125; <span class="keyword">from</span> <span class="string">'./config'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> components <span class="keyword">from</span> <span class="string">'./components'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> login = StackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    PreLogin: &#123;<span class="attr">screen</span>: components.PreLogin&#125;,</span><br><span class="line">    Login: &#123;<span class="attr">screen</span>: components.Login&#125;,</span><br><span class="line">    ResetPassword: &#123;<span class="attr">screen</span>: components.ResetPassword&#125;,</span><br><span class="line">    RegisterMobile: &#123;<span class="attr">screen</span>: components.RegisterMobile&#125;,</span><br><span class="line">    RegisterVerify: &#123;<span class="attr">screen</span>: components.RegisterVerify&#125;,</span><br><span class="line">    RegisterProfile: &#123;<span class="attr">screen</span>: components.RegisterProfile&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      headerTintColor: COLOR.textLightNormal,</span><br><span class="line">      headerStyle: &#123;<span class="attr">backgroundColor</span>: COLOR.theme&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tabNearBy = StackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    Nearby: &#123;<span class="attr">screen</span>: components.Nearby&#125;,</span><br><span class="line">    SelectCityAndSport: &#123;<span class="attr">screen</span>: components.SelectCityAndSport&#125;,</span><br><span class="line">    Album: &#123;<span class="attr">screen</span>: components.Album&#125;,</span><br><span class="line">    Player: &#123;<span class="attr">screen</span>: components.Player&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      headerTintColor: COLOR.textLightNormal,</span><br><span class="line">      headerStyle: &#123;<span class="attr">backgroundColor</span>: COLOR.theme&#125;,</span><br><span class="line">      tabBarIcon: <span class="function">(<span class="params">&#123;focused, tintColor&#125;</span>) =&gt;</span> (</span><br><span class="line">        &lt;components.Icon</span><br><span class="line">          name=<span class="string">'location-on'</span></span><br><span class="line">          style=&#123;&#123;<span class="attr">color</span>: tintColor, <span class="attr">fontSize</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      ),</span><br><span class="line">      title: <span class="string">'附近'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tabAtCourt = StackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    AtCourt: &#123;<span class="attr">screen</span>: components.AtCourt&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      headerTintColor: COLOR.textLightNormal,</span><br><span class="line">      headerStyle: &#123;<span class="attr">backgroundColor</span>: COLOR.theme&#125;,</span><br><span class="line">      tabBarIcon: <span class="function">(<span class="params">&#123;focused, tintColor&#125;</span>) =&gt;</span> (</span><br><span class="line">        &lt;components.Icon</span><br><span class="line">          name=<span class="string">'add-box'</span></span><br><span class="line">          style=&#123;&#123;<span class="attr">color</span>: tintColor, <span class="attr">fontSize</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      ),</span><br><span class="line">      title: <span class="string">'在球场'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tabMe = StackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    Me: &#123;<span class="attr">screen</span>: components.Me&#125;,</span><br><span class="line">    EditProfileGender: &#123;<span class="attr">screen</span>: components.EditProfileGender&#125;,</span><br><span class="line">    EditProfile: &#123;<span class="attr">screen</span>: components.EditProfile&#125;,</span><br><span class="line">    EditProfileNickname: &#123;<span class="attr">screen</span>: components.EditProfileNickname&#125;,</span><br><span class="line">    EditProfileAvatar: &#123;<span class="attr">screen</span>: components.EditProfileAvatar&#125;,</span><br><span class="line">    EditProfileEmail: &#123;<span class="attr">screen</span>: components.EditProfileEmail&#125;,</span><br><span class="line">    EditProfileIntro: &#123;<span class="attr">screen</span>: components.EditProfileIntro&#125;,</span><br><span class="line">    EditProfileBackground: &#123;<span class="attr">screen</span>: components.EditProfileBackground&#125;,</span><br><span class="line">    Settings: &#123;<span class="attr">screen</span>: components.Settings&#125;,</span><br><span class="line">    SelectRate: &#123;<span class="attr">screen</span>: components.SelectRate&#125;,</span><br><span class="line">    About: &#123;<span class="attr">screen</span>: components.About&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      headerTintColor: COLOR.textLightNormal,</span><br><span class="line">      headerStyle: &#123;<span class="attr">backgroundColor</span>: COLOR.theme&#125;,</span><br><span class="line">      tabBarIcon: <span class="function">(<span class="params">&#123;focused, tintColor&#125;</span>) =&gt;</span> (</span><br><span class="line">        &lt;components.Icon</span><br><span class="line">          name=<span class="string">'account-circle'</span></span><br><span class="line">          style=&#123;&#123;<span class="attr">color</span>: tintColor, <span class="attr">fontSize</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      ),</span><br><span class="line">      title: <span class="string">'我'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tab = TabNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    TabNearBy: &#123;<span class="attr">screen</span>: tabNearBy&#125;,</span><br><span class="line">    TabAtCourt: &#123;<span class="attr">screen</span>: tabAtCourt&#125;,</span><br><span class="line">    TabMe: &#123;<span class="attr">screen</span>: tabMe&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    tabBarPosition: <span class="string">'bottom'</span>,</span><br><span class="line">    lazy: <span class="literal">true</span>,</span><br><span class="line">    tabBarOptions: &#123;</span><br><span class="line">      activeTintColor: COLOR.theme,</span><br><span class="line">      activeBackgroundColor: COLOR.backgroundLighter,</span><br><span class="line">      inactiveTintColor: COLOR.textEmpha,</span><br><span class="line">      inactiveBackgroundColor: COLOR.backgroundDarker,</span><br><span class="line">      showIcon: <span class="literal">true</span>,</span><br><span class="line">      showLabel: <span class="literal">true</span>,</span><br><span class="line">      style: &#123;<span class="attr">backgroundColor</span>: COLOR.backgroundDarker&#125;,</span><br><span class="line">      tabStyle: &#123;<span class="attr">paddingTop</span>: <span class="number">2</span>, <span class="attr">paddingBottom</span>: <span class="number">0</span>&#125;,</span><br><span class="line">      labelStyle: &#123;<span class="attr">fontSize</span>: <span class="number">12</span>, <span class="attr">marginTop</span>: <span class="number">0</span>, <span class="attr">marginBottom</span>: <span class="number">5</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    headerMode: <span class="string">'none'</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AppNavigator = StackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    Bootstrap: &#123;<span class="attr">screen</span>: components.Bootstrap&#125;,</span><br><span class="line"></span><br><span class="line">    Login: &#123;<span class="attr">screen</span>: login&#125;,</span><br><span class="line"></span><br><span class="line">    Tab: &#123;<span class="attr">screen</span>: tab&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    initialRouteName: <span class="string">'Bootstrap'</span>,</span><br><span class="line">    headerMode: <span class="string">'none'</span>,</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      gesturesEnabled: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">navToBootstrap</span> (<span class="params">navigation, &#123;isReset = false&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  navigation.navigate(<span class="string">'Bootstrap'</span>, &#123;isReset&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">navToTab</span> (<span class="params">navigation</span>) </span>&#123;</span><br><span class="line">  navigation.navigate(<span class="string">'Tab'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">navToAlbum</span> (<span class="params">navigation, &#123;files, currentIndex = <span class="number">0</span>&#125;</span>) </span>&#123;</span><br><span class="line">  navigation.navigate(<span class="string">'Album'</span>, &#123;files, currentIndex&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">navToPlayer</span> (<span class="params">navigation, &#123;file, autoPlay&#125;</span>) </span>&#123;</span><br><span class="line">  navigation.navigate(<span class="string">'Player'</span>, &#123;file, autoPlay&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="分析结构："><a href="#分析结构：" class="headerlink" title="分析结构："></a>分析结构：</h6><ul><li><p>1.下面四个方法暂且不看，大概就是传递各种参数，参考以上各种文档连接；</p></li><li><p>2.导出的是AppNavigator方法，使用了react-navigation的StackNavigator方法，其中很容易看到一共分为了三个大部分Bootstrap, Login, Tab：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Bootstrap: &#123;screen: components.Bootstrap&#125;,</span><br><span class="line"></span><br><span class="line">    Login: &#123;screen: login&#125;,</span><br><span class="line"></span><br><span class="line">    Tab: &#123;screen: tab&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Bootstrap是启动页</p></blockquote><blockquote><p>Login是登录部分导航合集</p></blockquote><blockquote><p>Tab是内容部分导航架构合集</p></blockquote><h6 id="一、其中Bootstrap比较简单，负责app启动部分展示及交互；"><a href="#一、其中Bootstrap比较简单，负责app启动部分展示及交互；" class="headerlink" title="一、其中Bootstrap比较简单，负责app启动部分展示及交互；"></a>一、其中Bootstrap比较简单，负责app启动部分展示及交互；</h6><h6 id="二、分析Login部分："><a href="#二、分析Login部分：" class="headerlink" title="二、分析Login部分："></a>二、分析Login部分：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> login = StackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    PreLogin: &#123;<span class="attr">screen</span>: components.PreLogin&#125;,</span><br><span class="line">    Login: &#123;<span class="attr">screen</span>: components.Login&#125;,</span><br><span class="line">    ResetPassword: &#123;<span class="attr">screen</span>: components.ResetPassword&#125;,</span><br><span class="line">    RegisterMobile: &#123;<span class="attr">screen</span>: components.RegisterMobile&#125;,</span><br><span class="line">    RegisterVerify: &#123;<span class="attr">screen</span>: components.RegisterVerify&#125;,</span><br><span class="line">    RegisterProfile: &#123;<span class="attr">screen</span>: components.RegisterProfile&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      headerTintColor: COLOR.textLightNormal,</span><br><span class="line">      headerStyle: &#123;<span class="attr">backgroundColor</span>: COLOR.theme&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>1.首先，使用了StackNavigator功能，就是正常的页面跳转传参；</p><p>2.其中包含六个页面，都是和登录校验相关的比如PreLogin（登陆前）、Login（登录）、ResetPassword（重设密码）等页面。</p><p>3.登录部分单独的配置navigationOptions；</p><h6 id="三、Tab部分（app的主体部分）"><a href="#三、Tab部分（app的主体部分）" class="headerlink" title="三、Tab部分（app的主体部分）"></a>三、Tab部分（app的主体部分）</h6><p>根据<figure class="highlight plain"><figcaption><span>&#123;screen: tab&#125;```源码，Tab也是个合集，来看tab是怎样被封装的：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">const tab = TabNavigator(</span><br><span class="line">&#123;</span><br><span class="line">    TabNearBy: &#123;screen: tabNearBy&#125;,</span><br><span class="line">    TabAtCourt: &#123;screen: tabAtCourt&#125;,</span><br><span class="line">    TabMe: &#123;screen: tabMe&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    tabBarPosition: &apos;bottom&apos;,</span><br><span class="line">    lazy: true,</span><br><span class="line">    tabBarOptions: &#123;</span><br><span class="line">      activeTintColor: COLOR.theme,</span><br><span class="line">      activeBackgroundColor: COLOR.backgroundLighter,</span><br><span class="line">      inactiveTintColor: COLOR.textEmpha,</span><br><span class="line">      inactiveBackgroundColor: COLOR.backgroundDarker,</span><br><span class="line">      showIcon: true,</span><br><span class="line">      showLabel: true,</span><br><span class="line">      style: &#123;backgroundColor: COLOR.backgroundDarker&#125;,</span><br><span class="line">      tabStyle: &#123;paddingTop: 2, paddingBottom: 0&#125;,</span><br><span class="line">      labelStyle: &#123;fontSize: 12, marginTop: 0, marginBottom: 5&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    headerMode: &apos;none&apos;</span><br><span class="line"> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>显然，使用了React Navigation的TabNavigator功能；<br>其中，包含三部分TabNearBy、TabAtCourt、TabMe，也就是如下图三部分tab标签（附近、在球场、我）：</p><p><img src="https://upload-images.jianshu.io/upload_images/5339345-f9176a0c812d2f75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="Screenshot_2017-10-09-18-20-23-410_在球场.png"> <img src="https://upload-images.jianshu.io/upload_images/5339345-e758413743ebb9c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="Screenshot_2017-10-10-10-58-37-675_在球场.png"> <img src="https://upload-images.jianshu.io/upload_images/5339345-62d838cbbbb44139.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="Screenshot_2017-10-10-10-59-47-387_在球场.png"></p><ul><li><strong>TabNearBy （附近）</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TabNearBy: &#123;<span class="attr">screen</span>: tabNearBy&#125;</span><br></pre></td></tr></table></figure><p>同样被封装，来看tabNearBy的封装代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tabNearBy = StackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    Nearby: &#123;<span class="attr">screen</span>: components.Nearby&#125;,</span><br><span class="line">    SelectCityAndSport: &#123;<span class="attr">screen</span>: components.SelectCityAndSport&#125;,</span><br><span class="line">    Album: &#123;<span class="attr">screen</span>: components.Album&#125;,</span><br><span class="line">    Player: &#123;<span class="attr">screen</span>: components.Player&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      headerTintColor: COLOR.textLightNormal,</span><br><span class="line">      headerStyle: &#123;<span class="attr">backgroundColor</span>: COLOR.theme&#125;,</span><br><span class="line">      tabBarIcon: <span class="function">(<span class="params">&#123;focused, tintColor&#125;</span>) =&gt;</span> (</span><br><span class="line">        &lt;components.Icon</span><br><span class="line">          name=<span class="string">'location-on'</span></span><br><span class="line">          style=&#123;&#123;<span class="attr">color</span>: tintColor, <span class="attr">fontSize</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      ),</span><br><span class="line">      title: <span class="string">'附近'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>包含四部分导航：</p><blockquote><p>1.Nearby  （附近，主题页面）</p></blockquote><blockquote><p>2.SelectCityAndSport （选择城市，作者把选择城市的弹框当成一层页面来用，解决了物理返回键的问题，很得体。）</p></blockquote><blockquote><p>3.Album （相册部分）</p></blockquote><blockquote><p>4.Player （个人主页）</p></blockquote><p><strong>实际上就是“附近”模块下面的页面的导航合集。</strong></p><ul><li><strong>tabAtCourt （在球场）</strong></li></ul><p>查看源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tabAtCourt = StackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    AtCourt: &#123;<span class="attr">screen</span>: components.AtCourt&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      headerTintColor: COLOR.textLightNormal,</span><br><span class="line">      headerStyle: &#123;<span class="attr">backgroundColor</span>: COLOR.theme&#125;,</span><br><span class="line">      tabBarIcon: <span class="function">(<span class="params">&#123;focused, tintColor&#125;</span>) =&gt;</span> (</span><br><span class="line">        &lt;components.Icon</span><br><span class="line">          name=<span class="string">'add-box'</span></span><br><span class="line">          style=&#123;&#123;<span class="attr">color</span>: tintColor, <span class="attr">fontSize</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      ),</span><br><span class="line">      title: <span class="string">'在球场'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>相对比较简单，只有一个模块AtCourt。</p><ul><li><strong>tabMe （我）</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tabMe = StackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    Me: &#123;<span class="attr">screen</span>: components.Me&#125;,</span><br><span class="line">    EditProfileGender: &#123;<span class="attr">screen</span>: components.EditProfileGender&#125;,</span><br><span class="line">    EditProfile: &#123;<span class="attr">screen</span>: components.EditProfile&#125;,</span><br><span class="line">    EditProfileNickname: &#123;<span class="attr">screen</span>: components.EditProfileNickname&#125;,</span><br><span class="line">    EditProfileAvatar: &#123;<span class="attr">screen</span>: components.EditProfileAvatar&#125;,</span><br><span class="line">    EditProfileEmail: &#123;<span class="attr">screen</span>: components.EditProfileEmail&#125;,</span><br><span class="line">    EditProfileIntro: &#123;<span class="attr">screen</span>: components.EditProfileIntro&#125;,</span><br><span class="line">    EditProfileBackground: &#123;<span class="attr">screen</span>: components.EditProfileBackground&#125;,</span><br><span class="line">    Settings: &#123;<span class="attr">screen</span>: components.Settings&#125;,</span><br><span class="line">    SelectRate: &#123;<span class="attr">screen</span>: components.SelectRate&#125;,</span><br><span class="line">    About: &#123;<span class="attr">screen</span>: components.About&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      headerTintColor: COLOR.textLightNormal,</span><br><span class="line">      headerStyle: &#123;<span class="attr">backgroundColor</span>: COLOR.theme&#125;,</span><br><span class="line">      tabBarIcon: <span class="function">(<span class="params">&#123;focused, tintColor&#125;</span>) =&gt;</span> (</span><br><span class="line">        &lt;components.Icon</span><br><span class="line">          name=<span class="string">'account-circle'</span></span><br><span class="line">          style=&#123;&#123;<span class="attr">color</span>: tintColor, <span class="attr">fontSize</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      ),</span><br><span class="line">      title: <span class="string">'我'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>关于我这个模块相对比较复杂，但是主要是一些编辑个人信息，设置，个人主页等页面。</p><p><img src="https://upload-images.jianshu.io/upload_images/5339345-70582209e8b63bb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="Screenshot_2017-10-10-10-53-33-765_在球场.png">  <img src="https://upload-images.jianshu.io/upload_images/5339345-75b4d01c823f66ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="Screenshot_2017-10-10-10-55-58-870_在球场.png"> <img src="https://upload-images.jianshu.io/upload_images/5339345-71a3a5887863dd36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="Screenshot_2017-10-10-10-57-02-276_在球场.png"></p><h3 id="至此，“在球场”整体导航设计已经出来了，接下来就是具体页面的个性化设置，比如显示标题、传参、跳转等。任选其中一个页面进行分析："><a href="#至此，“在球场”整体导航设计已经出来了，接下来就是具体页面的个性化设置，比如显示标题、传参、跳转等。任选其中一个页面进行分析：" class="headerlink" title="至此，“在球场”整体导航设计已经出来了，接下来就是具体页面的个性化设置，比如显示标题、传参、跳转等。任选其中一个页面进行分析："></a>至此，“在球场”整体导航设计已经出来了，接下来就是具体页面的个性化设置，比如显示标题、传参、跳转等。任选其中一个页面进行分析：</h3><p>查看Nearby组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> navigationOptions = <span class="function">(<span class="params">&#123;navigation&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;cityAndSport, onPressCityAndSport&#125; = navigation.state.params || &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> button = cityAndSport &amp;&amp; onPressCityAndSport</span><br><span class="line">      ? &lt;components.NavButton onPress=&#123;onPressCityAndSport&#125;&gt;</span><br><span class="line">        &#123;cityAndSport&#125;&lt;/components.NavButton&gt;</span><br><span class="line">      : <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> navigationOptions = &#123;</span><br><span class="line">      title: <span class="string">'附近'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Platform.OS === <span class="string">'ios'</span>) &#123;</span><br><span class="line">      navigationOptions.headerLeft = button</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      navigationOptions.headerRight = button</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> navigationOptions</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>就是根据传过来的参数cityAndSport和onPressCityAndSport来判断显示的button状态。注意这种方式编码的话，要把navigationOptions返回出去。实际上，navigationOptions的写法灵活多变，具体技巧在最上边的参考链接里有介绍。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactJs写旋转木马轮播图</title>
      <link href="/blog/2017/06/11/ReactJs%E5%86%99%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>/blog/2017/06/11/ReactJs%E5%86%99%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>备注：最近工作需要，要用react实现旋转木马的轮播图效果，在网上查了查没有相似的案例，只有用react实现的简单的轮播图，还有就是用jQuery实现的旋转木马轮播图，在参考了这两个实现方式的基础上，我用react转化了这种实现，过程真的很纠结，但是还是做出来了，效果还可以。</p></blockquote><p>效果图：</p><p><img src="https://upload-images.jianshu.io/upload_images/5339345-ea9ca387dcf671a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><a id="more"></a><h3 id="实现思路分析"><a href="#实现思路分析" class="headerlink" title="实现思路分析"></a>实现思路分析</h3><h4 id="1-每张图片（li节点）的布局"><a href="#1-每张图片（li节点）的布局" class="headerlink" title="1.每张图片（li节点）的布局"></a>1.每张图片（li节点）的布局</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul className=&#123;style[&apos;poster-list&apos;]&#125; style=&#123;&#123;width:width,height:height&#125;&#125;&gt;</span><br><span class="line">   &#123;</span><br><span class="line">        this.props.imgArray.map(function(item,index)&#123;</span><br><span class="line">            return &lt;li ref=&#123;&apos;items&apos;+index&#125; className=&#123;style[&apos;poster-item&apos;]&#125; style=&#123;this.renderstyle(index)&#125; key=&#123;index&#125;&gt;&lt;a href=&#123;this.props.linkArray[index]&#125;&gt;&lt;img width=&quot;100%&quot; height=&quot;100%&quot; src=&#123;item&#125;/&gt;&lt;/a&gt;&lt;/li&gt;;</span><br><span class="line">        &#125;.bind(this))</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>主要就是renderstyle函数在控制他们的排列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">renderstyle(index) &#123;</span><br><span class="line">        const &#123; number, width, imgWidth, scale, vertical, height &#125; = this.props.lunboObject;</span><br><span class="line">        const middleIndex = Math.floor(number / 2);</span><br><span class="line">        const btnWidth = (width-imgWidth) / 2;</span><br><span class="line">        const gap = btnWidth/middleIndex;</span><br><span class="line">        let Imgleft;</span><br><span class="line">        let ImgTop;</span><br><span class="line">        let Imgscale;</span><br><span class="line">        let zIndex;</span><br><span class="line">        let opacity;</span><br><span class="line"></span><br><span class="line">        if(index &lt;= middleIndex)&#123;</span><br><span class="line">            // 右侧图片</span><br><span class="line">            Imgscale = Math.pow(scale, (index));</span><br><span class="line">            Imgleft = width - (middleIndex-index)*gap - imgWidth*Imgscale;</span><br><span class="line">            zIndex=middleIndex+1 - index;</span><br><span class="line">            opacity=1/++index;</span><br><span class="line"></span><br><span class="line">        &#125;else if(index &gt; middleIndex)&#123;</span><br><span class="line">            // 左侧图片</span><br><span class="line">            Imgscale = Math.pow(scale, (number-index));</span><br><span class="line">            Imgleft = (index-(middleIndex+1))*gap;</span><br><span class="line">            zIndex = index-middleIndex;</span><br><span class="line">            opacity = 1 - middleIndex/index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        switch(vertical)&#123;</span><br><span class="line">            case &apos;bottom&apos;:</span><br><span class="line">                ImgTop = parseInt(height - height*Imgscale);</span><br><span class="line">            break;</span><br><span class="line">            case &apos;center&apos;:</span><br><span class="line">                ImgTop = parseInt((height - height*Imgscale)/2);</span><br><span class="line">            break;</span><br><span class="line">            default:</span><br><span class="line">                ImgTop = parseInt((height - height*Imgscale)/2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &#123;</span><br><span class="line">            width: parseInt(imgWidth*Imgscale),</span><br><span class="line">            height: parseInt(height*Imgscale), </span><br><span class="line">            left:parseInt(Imgleft),</span><br><span class="line">            zIndex:zIndex,</span><br><span class="line">            opacity:opacity,</span><br><span class="line">            top:ImgTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>要想实现3D的效果，需要同时控制每张图片的6个属性来回变化，下面分析他们的计算过程（先布局）：</p></blockquote><p>index关系：</p><p><img src="https://upload-images.jianshu.io/upload_images/5339345-2ca232acfca72e4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><blockquote><p>实际上要分为左右两部分实现：</p></blockquote><p>右侧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Imgscale = Math.pow(scale, (index));</span><br><span class="line">Imgleft = width - (middleIndex-index)*gap - imgWidth*Imgscale;</span><br><span class="line">zIndex=middleIndex+1 - index;</span><br><span class="line">opacity=1/++index;</span><br></pre></td></tr></table></figure><p>图片的Zindex和opacity需要认真考虑一下如何设置，其他的都好说，就是数学关系。<br>zIndex实际上最中间的是3，向右依次递减；<br>opacity中间是1，向右依次是1/2,1/3 … ；</p><p>左侧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 左侧图片</span><br><span class="line">Imgscale = Math.pow(scale, (number-index));</span><br><span class="line">Imgleft = (index-(middleIndex+1))*gap;</span><br><span class="line">zIndex = index-middleIndex;</span><br><span class="line">opacity = 1 - middleIndex/index;</span><br></pre></td></tr></table></figure><p>左侧唯一麻烦的是，opacity的设置，我是需找的数学规律，只要让左侧的opacity呈现1,1/2,1/3 … 即可。</p><h4 id="2-点击箭头让他动起来"><a href="#2-点击箭头让他动起来" class="headerlink" title="2.点击箭头让他动起来"></a>2.点击箭头让他动起来</h4><blockquote><p>如果是一般的轮播图就好办了，直接控制ul的left值就可以，不用直接操作dom，而这种轮播图是不断控制每一个li，让他的状态变化到上一个或者下一个li的状态，用state控制变量的方式实在是不会，所以还是操作的dom。</p></blockquote><p>首先，组件挂载后，获取dom对象，组成数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">       for(let i=0;i&lt;this.props.lunboObject.number;i++)&#123;</span><br><span class="line">            this.itemsArr.push(findDOMNode(this.refs[&apos;items&apos;+(i)]));</span><br><span class="line">       &#125;;</span><br><span class="line">        this.autoPlay();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后，比如点击左侧按钮的时候，遍历dom数组，让当前的li的状态变为他的上一个（prev）li的状态，处理一下临界的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">this.itemsArr.forEach((item, index) =&gt; &#123;</span><br><span class="line">    let self = item;</span><br><span class="line">    let next = this.itemsArr[index+1];</span><br><span class="line">    if(index == (len-1))&#123;</span><br><span class="line">        next = this.itemsArr[0];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    this.rotateStyle(self, next);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>rotateStyle这个函数是控制他运动的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rotateStyle(self, next) &#123;</span><br><span class="line">        const &#123; left, top, width, height, zIndex, opacity &#125; = next.style;</span><br><span class="line">        this.animate(self, &#123;left:left,width:width,height:height,zIndex:zIndex,opacity: opacity,top:top&#125;, this.props.lunboObject.tweenString, () =&gt; &#123;</span><br><span class="line">            ++this.LOOPNUM ;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>animate是封装的缓动函数，这个不重要，就不详细讲了。</p><p>点击右侧按钮的时候原理类似，就不再赘述。</p><h4 id="3-自己动起来"><a href="#3-自己动起来" class="headerlink" title="3.自己动起来"></a>3.自己动起来</h4><blockquote><p>这个就没啥可说的了，就是设置定时器不断触发右击箭头函数，鼠标移入清除定时器，鼠标移出，开启定时器即可。</p></blockquote><h4 id="4-小圆点跟着点亮"><a href="#4-小圆点跟着点亮" class="headerlink" title="4.小圆点跟着点亮"></a>4.小圆点跟着点亮</h4><p>维护一个全局的state变量，activeIndex，每次dom运动的话就会变化这个值，然后控制点是否点亮。</p><h4 id="5点击某个小圆点，让他运动到当前位置"><a href="#5点击某个小圆点，让他运动到当前位置" class="headerlink" title="5点击某个小圆点，让他运动到当前位置"></a>5点击某个小圆点，让他运动到当前位置</h4><blockquote><p> 这是难点！</p></blockquote><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// 点击小圆点动</span><br><span class="line">    gotoDotView() &#123;</span><br><span class="line">        if(this.state.dotsIndex == this.state.activeIndex)&#123;</span><br><span class="line">            return ;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            let len = this.itemsArr.length;</span><br><span class="line">            // 运动到小圆点指示的位置</span><br><span class="line">            if(this.state.dotsIndex - this.state.activeIndex &gt; 0)&#123;</span><br><span class="line">                // 如果点击在右侧 向左运动</span><br><span class="line">                const dotsDiff = this.state.dotsIndex - this.state.activeIndex;</span><br><span class="line">                this.setState(&#123;</span><br><span class="line">                    activeIndex: this.state.activeIndex + dotsDiff</span><br><span class="line">                &#125;)</span><br><span class="line">                </span><br><span class="line">                this.itemsArr.forEach((item, index) =&gt; &#123;</span><br><span class="line">                    let self = item;</span><br><span class="line">                    let nextIndex = Number.parseInt(index-dotsDiff);</span><br><span class="line">                    if(nextIndex &lt; 0)&#123;</span><br><span class="line">                        nextIndex = nextIndex+len;</span><br><span class="line">                    &#125;</span><br><span class="line">                    let next = this.itemsArr[nextIndex];</span><br><span class="line">                    this.rotateStyle(self, next);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                // 如果点击在左侧</span><br><span class="line">                const dotsDiff = this.state.activeIndex - this.state.dotsIndex;</span><br><span class="line">                this.setState(&#123;</span><br><span class="line">                    activeIndex: this.state.activeIndex - dotsDiff</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                this.itemsArr.forEach((item, index) =&gt; &#123;</span><br><span class="line">                    let self = item;</span><br><span class="line">                    let prevIndex = Number.parseInt(index+dotsDiff);</span><br><span class="line">                    if(prevIndex &gt;= len)&#123;</span><br><span class="line">                        prevIndex = prevIndex-len;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    let prev = this.itemsArr[prevIndex];</span><br><span class="line">                    this.rotateStyle(self, prev);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里要分为两种情况，点击点在当前活动点的右侧，或者左侧。然后记录当前两个点之间的差值，这个时候，遍历每个dom，当前的item要变为计算完差值后的item的状态，并且考虑临界值的处理，我也说不清楚，具体还是看代码吧。</p><h4 id="6-关于缓动函数"><a href="#6-关于缓动函数" class="headerlink" title="6.关于缓动函数"></a>6.关于缓动函数</h4><p>看代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">     * animate函数是动画封装函数</span><br><span class="line">     * @para0  elem参数就是运动的对象</span><br><span class="line">     * @para1  targetJSON参数就是运动的终点状态，可以写px，也可以不写px</span><br><span class="line">     * @para2  time是运动总时间，毫秒为单位</span><br><span class="line">     * @para3  tweenString缓冲描述词，比如&quot;Linear&quot;</span><br><span class="line">     * @para4  callback是回调函数，可选</span><br><span class="line">    */</span><br><span class="line">    animate(elem , targetJSON , tweenString , callback)&#123;</span><br><span class="line">        // 缓冲描述词集合</span><br><span class="line">        const Tween = &#123; </span><br><span class="line">            Linear: (t, b, c, d) =&gt; &#123;</span><br><span class="line">                return c * t / d + b;</span><br><span class="line">            &#125;,</span><br><span class="line">            //二次的</span><br><span class="line">            QuadEaseIn: (t, b, c, d) =&gt; &#123;</span><br><span class="line">                return c * (t /= d) * t + b;</span><br><span class="line">            &#125;,</span><br><span class="line">            QuadEaseOut: (t, b, c, d) =&gt; &#123;</span><br><span class="line">                return -c * (t /= d) * (t - 2) + b;</span><br><span class="line">            &#125;,</span><br><span class="line">            QuadEaseInOut: (t, b, c, d) =&gt; &#123;</span><br><span class="line">                if ((t /= d / 2) &lt; 1) return c / 2 * t * t + b;</span><br><span class="line">                return -c / 2 * ((--t) * (t - 2) - 1) + b;</span><br><span class="line">            &#125;,</span><br><span class="line">            //三次的</span><br><span class="line">            CubicEaseIn: (t, b, c, d) =&gt; &#123;</span><br><span class="line">                return c * (t /= d) * t * t + b;</span><br><span class="line">            &#125;,</span><br><span class="line">            CubicEaseOut: (t, b, c, d) =&gt; &#123;</span><br><span class="line">                return c * ((t = t / d - 1) * t * t + 1) + b;</span><br><span class="line">            &#125;,</span><br><span class="line">            CubicEaseInOut: (t, b, c, d) =&gt; &#123;</span><br><span class="line">                if ((t /= d / 2) &lt; 1) return c / 2 * t * t * t + b;</span><br><span class="line">                return c / 2 * ((t -= 2) * t * t + 2) + b;</span><br><span class="line">            &#125;,</span><br><span class="line">            //四次的</span><br><span class="line">            QuartEaseIn: (t, b, c, d) =&gt; &#123;</span><br><span class="line">                return c * (t /= d) * t * t * t + b;</span><br><span class="line">            &#125;,</span><br><span class="line">            QuartEaseOut: (t, b, c, d) =&gt; &#123;</span><br><span class="line">                return -c * ((t = t / d - 1) * t * t * t - 1) + b;</span><br><span class="line">            &#125;,</span><br><span class="line">            QuartEaseInOut: (t, b, c, d) =&gt; &#123;</span><br><span class="line">                if ((t /= d / 2) &lt; 1) return c / 2 * t * t * t * t + b;</span><br><span class="line">                return -c / 2 * ((t -= 2) * t * t * t - 2) + b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">       </span><br><span class="line">        let interval = 15;</span><br><span class="line">        let time = 300;</span><br><span class="line">        //初始状态，放在origninalJSON里面</span><br><span class="line">        let originalJSON = &#123;&#125;;</span><br><span class="line">        //变化的多少，放在deltaJSON里面</span><br><span class="line">        let deltaJSON = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        for(let k in targetJSON)&#123;</span><br><span class="line">            originalJSON[k] = parseFloat(elem.style[k]);</span><br><span class="line">            //把每个targetJSON中的值都去掉px</span><br><span class="line">            targetJSON[k] = parseFloat(targetJSON[k]);</span><br><span class="line">            //变化量JSON</span><br><span class="line">            deltaJSON[k] = targetJSON[k] - originalJSON[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //总执行函数次数：</span><br><span class="line">        let maxFrameNumber = time / interval;</span><br><span class="line">        //当前帧编号</span><br><span class="line">        let frameNumber = 0;</span><br><span class="line">        //这是一个临时变量一会儿用  </span><br><span class="line">        let tween;</span><br><span class="line">        //定时器</span><br><span class="line">        let timer = setInterval(() =&gt; &#123;</span><br><span class="line">            //要让所有的属性发生变化</span><br><span class="line">            for(let k in originalJSON)&#123;</span><br><span class="line">                // tween就表示这一帧应该在的位置：</span><br><span class="line">                tween = Tween[tweenString](frameNumber , originalJSON[k] , deltaJSON[k] , maxFrameNumber);</span><br><span class="line">                //根据是不是opacity来设置单位</span><br><span class="line">                if(k != &quot;opacity&quot;)&#123;</span><br><span class="line">                    elem.style[k] = tween + &quot;px&quot;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    elem.style[k] = tween;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //计数器</span><br><span class="line">            frameNumber++;</span><br><span class="line">            if(frameNumber == maxFrameNumber)&#123;</span><br><span class="line">                for(let k in targetJSON)&#123;</span><br><span class="line">                    if(k == &quot;opacity&quot; || k == &quot;zIndex&quot;)&#123;</span><br><span class="line">                        elem.style[k] = targetJSON[k];</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        elem.style[k] = targetJSON[k] + &quot;px&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                clearInterval(timer);</span><br><span class="line">                //拿掉是否在动属性，设为false</span><br><span class="line">                callback &amp;&amp; callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,interval);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际上这个封装也不难，主要在Tween的理解上，每个缓动函数接收四个参数，分别为：当前帧编号，初始值，结束值，结束帧编号。</p></blockquote><blockquote><p>在一个就是注意opacity和zIndex要淡出处理一下就可以了。</p></blockquote><h3 id="最后说一下，这个轮播是可以根据实际情况进行个化配置，"><a href="#最后说一下，这个轮播是可以根据实际情况进行个化配置，" class="headerlink" title="最后说一下，这个轮播是可以根据实际情况进行个化配置，"></a>最后说一下，这个轮播是可以根据实际情况进行个化配置，</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lunboObject: &#123;</span><br><span class="line">        &quot;width&quot;:995,//幻灯片的宽度</span><br><span class="line">        &quot;height&quot;:335,//幻灯片的高度</span><br><span class="line">        &quot;imgWidth&quot;:690,//幻灯片第一帧的宽度</span><br><span class="line">        &quot;interval&quot;: 2000,//幻灯片滚动的间隔时间</span><br><span class="line">        &quot;scale&quot;:0.85, //记录显示比例关系</span><br><span class="line">        &quot;number&quot;:5,</span><br><span class="line">        &quot;autoPlay&quot;:true,</span><br><span class="line">        &quot;vertical&quot;:&quot;top&quot;,  // center或者bottom,居中对齐或底部对齐</span><br><span class="line">        &quot;tweenString&quot;:&quot;QuadEaseIn&quot; // 运动方式，缓冲曲线</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
